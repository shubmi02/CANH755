
CANH755ZI_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f58  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080071f8  080071f8  000081f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d8  080072d8  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  080072d8  080072d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072e0  080072e0  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e0  080072e0  000082e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072e4  080072e4  000082e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  080072e8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  24000088  08007370  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000378  08007370  00009378  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147cf  00000000  00000000  000090b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fa  00000000  00000000  0001d885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0001fe80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be4  00000000  00000000  00020e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b79c  00000000  00000000  000219e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147d6  00000000  00000000  0005d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001874d9  00000000  00000000  00071956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f8e2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  001f8e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001fd770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080071e0 	.word	0x080071e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	080071e0 	.word	0x080071e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b3d      	ldr	r3, [pc, #244]	@ (800076c <SystemInit+0xfc>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a3c      	ldr	r2, [pc, #240]	@ (800076c <SystemInit+0xfc>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b39      	ldr	r3, [pc, #228]	@ (800076c <SystemInit+0xfc>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a38      	ldr	r2, [pc, #224]	@ (800076c <SystemInit+0xfc>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <SystemInit+0x100>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a32      	ldr	r2, [pc, #200]	@ (8000770 <SystemInit+0x100>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <SystemInit+0x104>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a30      	ldr	r2, [pc, #192]	@ (8000774 <SystemInit+0x104>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <SystemInit+0x104>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <SystemInit+0x104>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	492c      	ldr	r1, [pc, #176]	@ (8000774 <SystemInit+0x104>)
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <SystemInit+0x108>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemInit+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a24      	ldr	r2, [pc, #144]	@ (8000770 <SystemInit+0x100>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemInit+0x104>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <SystemInit+0x104>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b20      	ldr	r3, [pc, #128]	@ (8000774 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <SystemInit+0x104>)
 80006fa:	4a20      	ldr	r2, [pc, #128]	@ (800077c <SystemInit+0x10c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <SystemInit+0x104>)
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <SystemInit+0x110>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <SystemInit+0x104>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <SystemInit+0x114>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b1a      	ldr	r3, [pc, #104]	@ (8000774 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <SystemInit+0x104>)
 8000712:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemInit+0x114>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <SystemInit+0x104>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <SystemInit+0x114>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <SystemInit+0x104>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a11      	ldr	r2, [pc, #68]	@ (8000774 <SystemInit+0x104>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <SystemInit+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <SystemInit+0x118>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <SystemInit+0x118>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b11      	ldr	r3, [pc, #68]	@ (800078c <SystemInit+0x11c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemInit+0x120>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <SystemInit+0x124>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <SystemInit+0x128>)
 800075c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000760:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	e000ed00 	.word	0xe000ed00
 8000770:	52002000 	.word	0x52002000
 8000774:	58024400 	.word	0x58024400
 8000778:	eaf6ed7f 	.word	0xeaf6ed7f
 800077c:	02020200 	.word	0x02020200
 8000780:	01ff0000 	.word	0x01ff0000
 8000784:	01010280 	.word	0x01010280
 8000788:	580000c0 	.word	0x580000c0
 800078c:	5c001000 	.word	0x5c001000
 8000790:	ffff0000 	.word	0xffff0000
 8000794:	51008108 	.word	0x51008108
 8000798:	52004000 	.word	0x52004000

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80007a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007a8:	bf00      	nop
 80007aa:	4b4c      	ldr	r3, [pc, #304]	@ (80008dc <main+0x140>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0x24>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	1e5a      	subs	r2, r3, #1
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dcf4      	bgt.n	80007aa <main+0xe>
		;
	if (timeout < 0) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	da01      	bge.n	80007ca <main+0x2e>
		Error_Handler();
 80007c6:	f000 fa69 	bl	8000c9c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ca:	f000 fe1f 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ce:	f000 f893 	bl	80008f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b42      	ldr	r3, [pc, #264]	@ (80008dc <main+0x140>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a40      	ldr	r2, [pc, #256]	@ (80008dc <main+0x140>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b3e      	ldr	r3, [pc, #248]	@ (80008dc <main+0x140>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 fead 	bl	8002550 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f001 fec3 	bl	8002584 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000804:	bf00      	nop
 8000806:	4b35      	ldr	r3, [pc, #212]	@ (80008dc <main+0x140>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x80>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6a>
		;
	if (timeout < 0) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8a>
		Error_Handler();
 8000822:	f000 fa3b 	bl	8000c9c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f96d 	bl	8000b04 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800082a:	f000 f8e1 	bl	80009f0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fbc0 	bl	8000fb4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000834:	2001      	movs	r0, #1
 8000836:	f000 fbbd 	bl	8000fb4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800083a:	2002      	movs	r0, #2
 800083c:	f000 fbba 	bl	8000fb4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000840:	2101      	movs	r1, #1
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fc80 	bl	8001148 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000848:	4b25      	ldr	r3, [pc, #148]	@ (80008e0 <main+0x144>)
 800084a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000850:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <main+0x144>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000856:	4b22      	ldr	r3, [pc, #136]	@ (80008e0 <main+0x144>)
 8000858:	2200      	movs	r2, #0
 800085a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800085c:	4b20      	ldr	r3, [pc, #128]	@ (80008e0 <main+0x144>)
 800085e:	2200      	movs	r2, #0
 8000860:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <main+0x144>)
 8000864:	2200      	movs	r2, #0
 8000866:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000868:	491d      	ldr	r1, [pc, #116]	@ (80008e0 <main+0x144>)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fcf0 	bl	8001250 <BSP_COM_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <main+0xde>
  {
    Error_Handler();
 8000876:	f000 fa11 	bl	8000c9c <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
	/* -- Sample board code to send message over COM1 port ---- */
	printf("Welcome to STM32 world !\n\r");
 800087a:	481a      	ldr	r0, [pc, #104]	@ (80008e4 <main+0x148>)
 800087c:	f005 fe34 	bl	80064e8 <iprintf>
	/* -- Sample board code to switch on leds ---- */
	BSP_LED_On(LED_GREEN);
 8000880:	2000      	movs	r0, #0
 8000882:	f000 fc0d 	bl	80010a0 <BSP_LED_On>
	BSP_LED_On(LED_YELLOW);
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fc0a 	bl	80010a0 <BSP_LED_On>
	BSP_LED_On(LED_RED);
 800088c:	2002      	movs	r0, #2
 800088e:	f000 fc07 	bl	80010a0 <BSP_LED_On>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		/* -- Sample board code for User push-button in interrupt mode ---- */
		if (BspButtonState == BUTTON_PRESSED) {
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <main+0x14c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d10b      	bne.n	80008b2 <main+0x116>
			/* Update button state */
			BspButtonState = BUTTON_RELEASED;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <main+0x14c>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
			/* -- Sample board code to toggle leds ---- */
			BSP_LED_Toggle(LED_GREEN);
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fc27 	bl	80010f4 <BSP_LED_Toggle>
			BSP_LED_Toggle(LED_YELLOW);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fc24 	bl	80010f4 <BSP_LED_Toggle>
			BSP_LED_Toggle(LED_RED);
 80008ac:	2002      	movs	r0, #2
 80008ae:	f000 fc21 	bl	80010f4 <BSP_LED_Toggle>
			/* ..... Perform your action ..... */
		}

		TxData[0] = 0xA;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <main+0x150>)
 80008b4:	220a      	movs	r2, #10
 80008b6:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0xAD;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <main+0x150>)
 80008ba:	22ad      	movs	r2, #173	@ 0xad
 80008bc:	705a      	strb	r2, [r3, #1]

		/* Start the Transmission process */
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)
 80008be:	4a0b      	ldr	r2, [pc, #44]	@ (80008ec <main+0x150>)
 80008c0:	490b      	ldr	r1, [pc, #44]	@ (80008f0 <main+0x154>)
 80008c2:	480c      	ldr	r0, [pc, #48]	@ (80008f4 <main+0x158>)
 80008c4:	f001 fa01 	bl	8001cca <HAL_FDCAN_AddMessageToTxFifoQ>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <main+0x136>
				!= HAL_OK) {
			/* Transmission request Error */
			Error_Handler();
 80008ce:	f000 f9e5 	bl	8000c9c <Error_Handler>
		}
		HAL_Delay(10);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f000 fe2c 	bl	8001530 <HAL_Delay>
		if (BspButtonState == BUTTON_PRESSED) {
 80008d8:	e7db      	b.n	8000892 <main+0xf6>
 80008da:	bf00      	nop
 80008dc:	58024400 	.word	0x58024400
 80008e0:	240000a4 	.word	0x240000a4
 80008e4:	080071f8 	.word	0x080071f8
 80008e8:	240000b4 	.word	0x240000b4
 80008ec:	2400017c 	.word	0x2400017c
 80008f0:	24000158 	.word	0x24000158
 80008f4:	240000b8 	.word	0x240000b8

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09c      	sub	sp, #112	@ 0x70
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000902:	224c      	movs	r2, #76	@ 0x4c
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f005 fe43 	bl	8006592 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2220      	movs	r2, #32
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f005 fe3d 	bl	8006592 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000918:	2004      	movs	r0, #4
 800091a:	f001 fe47 	bl	80025ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b31      	ldr	r3, [pc, #196]	@ (80009e8 <SystemClock_Config+0xf0>)
 8000924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000926:	4a30      	ldr	r2, [pc, #192]	@ (80009e8 <SystemClock_Config+0xf0>)
 8000928:	f023 0301 	bic.w	r3, r3, #1
 800092c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800092e:	4b2e      	ldr	r3, [pc, #184]	@ (80009e8 <SystemClock_Config+0xf0>)
 8000930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <SystemClock_Config+0xf4>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000940:	4a2a      	ldr	r2, [pc, #168]	@ (80009ec <SystemClock_Config+0xf4>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <SystemClock_Config+0xf4>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000954:	bf00      	nop
 8000956:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <SystemClock_Config+0xf4>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800095e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000962:	d1f8      	bne.n	8000956 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800096c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	2302      	movs	r3, #2
 8000974:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000976:	2305      	movs	r3, #5
 8000978:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800097a:	2330      	movs	r3, #48	@ 0x30
 800097c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000982:	2305      	movs	r3, #5
 8000984:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800098a:	2308      	movs	r3, #8
 800098c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800098e:	2300      	movs	r3, #0
 8000990:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fe60 	bl	8002660 <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80009a6:	f000 f979 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	233f      	movs	r3, #63	@ 0x3f
 80009ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2303      	movs	r3, #3
 80009b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009b6:	2308      	movs	r3, #8
 80009b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ba:	2340      	movs	r3, #64	@ 0x40
 80009bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009be:	2340      	movs	r3, #64	@ 0x40
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2101      	movs	r1, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 fa9f 	bl	8002f14 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009dc:	f000 f95e 	bl	8000c9c <Error_Handler>
  }
}
 80009e0:	bf00      	nop
 80009e2:	3770      	adds	r7, #112	@ 0x70
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	58000400 	.word	0x58000400
 80009ec:	58024800 	.word	0x58024800

080009f0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80009f4:	4b40      	ldr	r3, [pc, #256]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 80009f6:	4a41      	ldr	r2, [pc, #260]	@ (8000afc <MX_FDCAN1_Init+0x10c>)
 80009f8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80009fa:	4b3f      	ldr	r3, [pc, #252]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a00:	4b3d      	ldr	r3, [pc, #244]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000a06:	4b3c      	ldr	r3, [pc, #240]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000a12:	4b39      	ldr	r3, [pc, #228]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000a18:	4b37      	ldr	r3, [pc, #220]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 0x8;
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a20:	2208      	movs	r2, #8
 8000a22:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8000a24:	4b34      	ldr	r3, [pc, #208]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a26:	221f      	movs	r2, #31
 8000a28:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 0x8;
 8000a2a:	4b33      	ldr	r3, [pc, #204]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000a30:	4b31      	ldr	r3, [pc, #196]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000a36:	4b30      	ldr	r3, [pc, #192]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000a48:	4b2b      	ldr	r3, [pc, #172]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000a54:	4b28      	ldr	r3, [pc, #160]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000a5a:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000a60:	4b25      	ldr	r3, [pc, #148]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000a66:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000a9c:	4816      	ldr	r0, [pc, #88]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000a9e:	f000 ff0b 	bl	80018b8 <HAL_FDCAN_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000aa8:	f000 f8f8 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000aac:	4812      	ldr	r0, [pc, #72]	@ (8000af8 <MX_FDCAN1_Init+0x108>)
 8000aae:	f001 f8e1 	bl	8001c74 <HAL_FDCAN_Start>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_FDCAN1_Init+0xcc>
		/* Start Error */
		Error_Handler();
 8000ab8:	f000 f8f0 	bl	8000c9c <Error_Handler>
	}

	TxHeader.Identifier = 0x321;
 8000abc:	4b10      	ldr	r3, [pc, #64]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000abe:	f240 3221 	movw	r2, #801	@ 0x321
 8000ac2:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000aca:	4b0d      	ldr	r3, [pc, #52]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_2;
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000aee:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <MX_FDCAN1_Init+0x110>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	240000b8 	.word	0x240000b8
 8000afc:	4000a000 	.word	0x4000a000
 8000b00:	24000158 	.word	0x24000158

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b51      	ldr	r3, [pc, #324]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b20:	4a4f      	ldr	r2, [pc, #316]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b49      	ldr	r3, [pc, #292]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3e:	4a48      	ldr	r2, [pc, #288]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b48:	4b45      	ldr	r3, [pc, #276]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	4b42      	ldr	r3, [pc, #264]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a40      	ldr	r2, [pc, #256]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b5e:	f043 0302 	orr.w	r3, r3, #2
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b3e      	ldr	r3, [pc, #248]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b3a      	ldr	r3, [pc, #232]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7a:	4a39      	ldr	r2, [pc, #228]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b84:	4b36      	ldr	r3, [pc, #216]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	4b33      	ldr	r3, [pc, #204]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b98:	4a31      	ldr	r2, [pc, #196]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <MX_GPIO_Init+0x15c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bb0:	2332      	movs	r3, #50	@ 0x32
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc0:	230b      	movs	r3, #11
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4826      	ldr	r0, [pc, #152]	@ (8000c64 <MX_GPIO_Init+0x160>)
 8000bcc:	f001 fadc 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bd0:	2386      	movs	r3, #134	@ 0x86
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	481f      	ldr	r0, [pc, #124]	@ (8000c68 <MX_GPIO_Init+0x164>)
 8000bec:	f001 facc 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4817      	ldr	r0, [pc, #92]	@ (8000c6c <MX_GPIO_Init+0x168>)
 8000c0e:	f001 fabb 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c12:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c24:	230a      	movs	r3, #10
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	480e      	ldr	r0, [pc, #56]	@ (8000c68 <MX_GPIO_Init+0x164>)
 8000c30:	f001 faaa 	bl	8002188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c34:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <MX_GPIO_Init+0x16c>)
 8000c52:	f001 fa99 	bl	8002188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	58024400 	.word	0x58024400
 8000c64:	58020800 	.word	0x58020800
 8000c68:	58020000 	.word	0x58020000
 8000c6c:	58020400 	.word	0x58020400
 8000c70:	58021800 	.word	0x58021800

08000c74 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c84:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <BSP_PB_Callback+0x24>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	601a      	str	r2, [r3, #0]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	240000b4 	.word	0x240000b4

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_MspInit+0x30>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x30>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x30>)
 8000cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0ba      	sub	sp, #232	@ 0xe8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	22c0      	movs	r2, #192	@ 0xc0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f005 fc48 	bl	8006592 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a26      	ldr	r2, [pc, #152]	@ (8000da0 <HAL_FDCAN_MspInit+0xc4>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d145      	bne.n	8000d98 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000d0c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fc82 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8000d2e:	f7ff ffb5 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <HAL_FDCAN_MspInit+0xc8>)
 8000d34:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <HAL_FDCAN_MspInit+0xc8>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000d42:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_FDCAN_MspInit+0xc8>)
 8000d44:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b14      	ldr	r3, [pc, #80]	@ (8000da4 <HAL_FDCAN_MspInit+0xc8>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	4a13      	ldr	r2, [pc, #76]	@ (8000da4 <HAL_FDCAN_MspInit+0xc8>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <HAL_FDCAN_MspInit+0xc8>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000d86:	2309      	movs	r3, #9
 8000d88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_FDCAN_MspInit+0xcc>)
 8000d94:	f001 f9f8 	bl	8002188 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000d98:	bf00      	nop
 8000d9a:	37e8      	adds	r7, #232	@ 0xe8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	4000a000 	.word	0x4000a000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020c00 	.word	0x58020c00

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 fb75 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 fa0c 	bl	800122c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
  }

  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e009      	b.n	8000e78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fa51 	bl	8001314 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf1      	blt.n	8000e64 <_write+0x12>
  }
  return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_close>:

int _close(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_isatty>:

int _isatty(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	@ (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f005 fb84 	bl	8006630 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	24080000 	.word	0x24080000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	24000184 	.word	0x24000184
 8000f5c:	24000378 	.word	0x24000378

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f64:	f7ff fb84 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6a:	490d      	ldr	r1, [pc, #52]	@ (8000fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f80:	4c0a      	ldr	r4, [pc, #40]	@ (8000fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f005 fb55 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f92:	f7ff fc03 	bl	800079c <main>
  bx  lr
 8000f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fa0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000fa4:	080072e8 	.word	0x080072e8
  ldr r2, =_sbss
 8000fa8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000fac:	24000378 	.word	0x24000378

08000fb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb0:	e7fe      	b.n	8000fb0 <ADC3_IRQHandler>
	...

08000fb4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d009      	beq.n	8000fdc <BSP_LED_Init+0x28>
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d006      	beq.n	8000fdc <BSP_LED_Init+0x28>
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d003      	beq.n	8000fdc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fd4:	f06f 0301 	mvn.w	r3, #1
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fda:	e055      	b.n	8001088 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10f      	bne.n	8001002 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8001094 <BSP_LED_Init+0xe0>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8001094 <BSP_LED_Init+0xe0>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b28      	ldr	r3, [pc, #160]	@ (8001094 <BSP_LED_Init+0xe0>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	617b      	str	r3, [r7, #20]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	e021      	b.n	8001046 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10f      	bne.n	8001028 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001008:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <BSP_LED_Init+0xe0>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100e:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <BSP_LED_Init+0xe0>)
 8001010:	f043 0310 	orr.w	r3, r3, #16
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001018:	4b1e      	ldr	r3, [pc, #120]	@ (8001094 <BSP_LED_Init+0xe0>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	e00e      	b.n	8001046 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001028:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <BSP_LED_Init+0xe0>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	4a19      	ldr	r2, [pc, #100]	@ (8001094 <BSP_LED_Init+0xe0>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <BSP_LED_Init+0xe0>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	f003 0302 	and.w	r3, r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a13      	ldr	r2, [pc, #76]	@ (8001098 <BSP_LED_Init+0xe4>)
 800104a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800104e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <BSP_LED_Init+0xe8>)
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	f107 0218 	add.w	r2, r7, #24
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f88c 	bl	8002188 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <BSP_LED_Init+0xe8>)
 8001074:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4a07      	ldr	r2, [pc, #28]	@ (8001098 <BSP_LED_Init+0xe4>)
 800107c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	f001 fa30 	bl	80024e8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800108a:	4618      	mov	r0, r3
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	58024400 	.word	0x58024400
 8001098:	08007270 	.word	0x08007270
 800109c:	2400000c 	.word	0x2400000c

080010a0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <BSP_LED_On+0x28>
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d006      	beq.n	80010c8 <BSP_LED_On+0x28>
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d003      	beq.n	80010c8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010c0:	f06f 0301 	mvn.w	r3, #1
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	e00b      	b.n	80010e0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	4a08      	ldr	r2, [pc, #32]	@ (80010ec <BSP_LED_On+0x4c>)
 80010cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <BSP_LED_On+0x50>)
 80010d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	f001 fa04 	bl	80024e8 <HAL_GPIO_WritePin>
  }

  return ret;
 80010e0:	68fb      	ldr	r3, [r7, #12]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2400000c 	.word	0x2400000c
 80010f0:	08007270 	.word	0x08007270

080010f4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <BSP_LED_Toggle+0x28>
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d006      	beq.n	800111c <BSP_LED_Toggle+0x28>
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d003      	beq.n	800111c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001114:	f06f 0301 	mvn.w	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	e00b      	b.n	8001134 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <BSP_LED_Toggle+0x4c>)
 8001120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4907      	ldr	r1, [pc, #28]	@ (8001144 <BSP_LED_Toggle+0x50>)
 8001128:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f001 f9f3 	bl	800251a <HAL_GPIO_TogglePin>
  }

  return ret;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2400000c 	.word	0x2400000c
 8001144:	08007270 	.word	0x08007270

08001148 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	460a      	mov	r2, r1
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	4613      	mov	r3, r2
 8001156:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <BSP_PB_Init+0xcc>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a2d      	ldr	r2, [pc, #180]	@ (8001214 <BSP_PB_Init+0xcc>)
 8001160:	f043 0304 	orr.w	r3, r3, #4
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <BSP_PB_Init+0xcc>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800117c:	2302      	movs	r3, #2
 800117e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001184:	79bb      	ldrb	r3, [r7, #6]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <BSP_PB_Init+0xd0>)
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fff3 	bl	8002188 <HAL_GPIO_Init>
 80011a2:	e031      	b.n	8001208 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80011a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <BSP_PB_Init+0xd0>)
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	f107 020c 	add.w	r2, r7, #12
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 ffe5 	bl	8002188 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <BSP_PB_Init+0xd4>)
 80011c4:	441a      	add	r2, r3
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4915      	ldr	r1, [pc, #84]	@ (8001220 <BSP_PB_Init+0xd8>)
 80011ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f000 fb20 	bl	8001816 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <BSP_PB_Init+0xd4>)
 80011dc:	1898      	adds	r0, r3, r2
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <BSP_PB_Init+0xdc>)
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	461a      	mov	r2, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	f000 faf5 	bl	80017d8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011ee:	2028      	movs	r0, #40	@ 0x28
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <BSP_PB_Init+0xe0>)
 80011f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f000 faa3 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001200:	2328      	movs	r3, #40	@ 0x28
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fab9 	bl	800177a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58024400 	.word	0x58024400
 8001218:	24000018 	.word	0x24000018
 800121c:	24000188 	.word	0x24000188
 8001220:	08007278 	.word	0x08007278
 8001224:	2400001c 	.word	0x2400001c
 8001228:	24000020 	.word	0x24000020

0800122c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4a04      	ldr	r2, [pc, #16]	@ (800124c <BSP_PB_IRQHandler+0x20>)
 800123c:	4413      	add	r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fafe 	bl	8001840 <HAL_EXTI_IRQHandler>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	24000188 	.word	0x24000188

08001250 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001266:	f06f 0301 	mvn.w	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e018      	b.n	80012a0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2294      	movs	r2, #148	@ 0x94
 8001272:	fb02 f303 	mul.w	r3, r2, r3
 8001276:	4a0d      	ldr	r2, [pc, #52]	@ (80012ac <BSP_COM_Init+0x5c>)
 8001278:	4413      	add	r3, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f86e 	bl	800135c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2294      	movs	r2, #148	@ 0x94
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	4a08      	ldr	r2, [pc, #32]	@ (80012ac <BSP_COM_Init+0x5c>)
 800128a:	4413      	add	r3, r2
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f80e 	bl	80012b0 <MX_USART3_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800129a:	f06f 0303 	mvn.w	r3, #3
 800129e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24000190 	.word	0x24000190

080012b0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_USART3_Init+0x60>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	220c      	movs	r2, #12
 80012ce:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	895b      	ldrh	r3, [r3, #10]
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	891b      	ldrh	r3, [r3, #8]
 80012e6:	461a      	mov	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	899b      	ldrh	r3, [r3, #12]
 80012f0:	461a      	mov	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012fc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f003 ffc0 	bl	8005284 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	24000008 	.word	0x24000008

08001314 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <__io_putchar+0x30>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	2394      	movs	r3, #148	@ 0x94
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <__io_putchar+0x34>)
 800132a:	1898      	adds	r0, r3, r2
 800132c:	1d39      	adds	r1, r7, #4
 800132e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001332:	2201      	movs	r2, #1
 8001334:	f004 f800 	bl	8005338 <HAL_UART_Transmit>
  return ch;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	24000224 	.word	0x24000224
 8001348:	24000190 	.word	0x24000190

0800134c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fc8f 	bl	8000c74 <BSP_PB_Callback>
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001364:	4b27      	ldr	r3, [pc, #156]	@ (8001404 <COM1_MspInit+0xa8>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <COM1_MspInit+0xa8>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001374:	4b23      	ldr	r3, [pc, #140]	@ (8001404 <COM1_MspInit+0xa8>)
 8001376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <COM1_MspInit+0xa8>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	4a1e      	ldr	r2, [pc, #120]	@ (8001404 <COM1_MspInit+0xa8>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <COM1_MspInit+0xa8>)
 8001394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <COM1_MspInit+0xa8>)
 80013a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013a6:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <COM1_MspInit+0xa8>)
 80013a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <COM1_MspInit+0xa8>)
 80013b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80013be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80013d0:	2307      	movs	r3, #7
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	480b      	ldr	r0, [pc, #44]	@ (8001408 <COM1_MspInit+0xac>)
 80013dc:	f000 fed4 	bl	8002188 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80013e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80013ea:	2307      	movs	r3, #7
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <COM1_MspInit+0xac>)
 80013f6:	f000 fec7 	bl	8002188 <HAL_GPIO_Init>
}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	58024400 	.word	0x58024400
 8001408:	58020c00 	.word	0x58020c00

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001412:	2003      	movs	r0, #3
 8001414:	f000 f98c 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001418:	f001 ff32 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <HAL_Init+0x68>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4913      	ldr	r1, [pc, #76]	@ (8001478 <HAL_Init+0x6c>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	4a0e      	ldr	r2, [pc, #56]	@ (8001478 <HAL_Init+0x6c>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a0b      	ldr	r2, [pc, #44]	@ (800147c <HAL_Init+0x70>)
 800144e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_Init+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f814 	bl	8001484 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e002      	b.n	800146c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fc1f 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	08007260 	.word	0x08007260
 800147c:	24000004 	.word	0x24000004
 8001480:	24000000 	.word	0x24000000

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_InitTick+0x60>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e021      	b.n	80014dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_InitTick+0x64>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_InitTick+0x60>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f971 	bl	8001796 <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f93b 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_InitTick+0x68>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	24000028 	.word	0x24000028
 80014e8:	24000000 	.word	0x24000000
 80014ec:	24000024 	.word	0x24000024

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	24000028 	.word	0x24000028
 8001514:	24000228 	.word	0x24000228

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	@ (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	24000228 	.word	0x24000228

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_Delay+0x44>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000028 	.word	0x24000028

08001578 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800157c:	4b03      	ldr	r3, [pc, #12]	@ (800158c <HAL_GetREVID+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0c1b      	lsrs	r3, r3, #16
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	5c001000 	.word	0x5c001000

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	05fa0000 	.word	0x05fa0000

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	@ (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	@ (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	@ 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	@ 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff40 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff90 	bl	8001684 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5f 	bl	8001630 <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff33 	bl	80015f4 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa4 	bl	80016ec <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <HAL_GetCurrentCPUID+0x24>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	2b07      	cmp	r3, #7
 80017c0:	d101      	bne.n	80017c6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e000      	b.n	80017c8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80017c6:	2301      	movs	r3, #1
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	460b      	mov	r3, r1
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00a      	b.n	800180a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]
      break;
 8001800:	e002      	b.n	8001808 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
      break;
 8001806:	bf00      	nop
  }

  return status;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
}
 800180a:	4618      	mov	r0, r3
 800180c:	371c      	adds	r7, #28
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e003      	b.n	8001832 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001830:	2300      	movs	r3, #0
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	2201      	movs	r2, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001864:	f7ff ffa4 	bl	80017b0 <HAL_GetCurrentCPUID>
 8001868:	4603      	mov	r3, r0
 800186a:	2b03      	cmp	r3, #3
 800186c:	d105      	bne.n	800187a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	011a      	lsls	r2, r3, #4
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <HAL_EXTI_IRQHandler+0x70>)
 8001874:	4413      	add	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e004      	b.n	8001884 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	011a      	lsls	r2, r3, #4
 800187e:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <HAL_EXTI_IRQHandler+0x74>)
 8001880:	4413      	add	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4013      	ands	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d009      	beq.n	80018a8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4798      	blx	r3
    }
  }
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	58000088 	.word	0x58000088
 80018b4:	580000c8 	.word	0x580000c8

080018b8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b098      	sub	sp, #96	@ 0x60
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80018c0:	4a84      	ldr	r2, [pc, #528]	@ (8001ad4 <HAL_FDCAN_Init+0x21c>)
 80018c2:	f107 030c 	add.w	r3, r7, #12
 80018c6:	4611      	mov	r1, r2
 80018c8:	224c      	movs	r2, #76	@ 0x4c
 80018ca:	4618      	mov	r0, r3
 80018cc:	f004 fedd 	bl	800668a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c6      	b.n	8001c68 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a7e      	ldr	r2, [pc, #504]	@ (8001ad8 <HAL_FDCAN_Init+0x220>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d106      	bne.n	80018f2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d106      	bne.n	800190c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff f9e8 	bl	8000cdc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699a      	ldr	r2, [r3, #24]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0210 	bic.w	r2, r2, #16
 800191a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800191c:	f7ff fdfc 	bl	8001518 <HAL_GetTick>
 8001920:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001922:	e014      	b.n	800194e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001924:	f7ff fdf8 	bl	8001518 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b0a      	cmp	r3, #10
 8001930:	d90d      	bls.n	800194e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001938:	f043 0201 	orr.w	r2, r3, #1
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2203      	movs	r2, #3
 8001946:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e18c      	b.n	8001c68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0308 	and.w	r3, r3, #8
 8001958:	2b08      	cmp	r3, #8
 800195a:	d0e3      	beq.n	8001924 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699a      	ldr	r2, [r3, #24]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800196c:	f7ff fdd4 	bl	8001518 <HAL_GetTick>
 8001970:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001972:	e014      	b.n	800199e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001974:	f7ff fdd0 	bl	8001518 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b0a      	cmp	r3, #10
 8001980:	d90d      	bls.n	800199e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2203      	movs	r2, #3
 8001996:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e164      	b.n	8001c68 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0e3      	beq.n	8001974 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699a      	ldr	r2, [r3, #24]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0202 	orr.w	r2, r2, #2
 80019ba:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7c1b      	ldrb	r3, [r3, #16]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d108      	bne.n	80019d6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699a      	ldr	r2, [r3, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	e007      	b.n	80019e6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699a      	ldr	r2, [r3, #24]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019e4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7c5b      	ldrb	r3, [r3, #17]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699a      	ldr	r2, [r3, #24]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019fc:	619a      	str	r2, [r3, #24]
 80019fe:	e007      	b.n	8001a10 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a0e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7c9b      	ldrb	r3, [r3, #18]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a26:	619a      	str	r2, [r3, #24]
 8001a28:	e007      	b.n	8001a3a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a38:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001a5e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0210 	bic.w	r2, r2, #16
 8001a6e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d108      	bne.n	8001a8a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0204 	orr.w	r2, r2, #4
 8001a86:	619a      	str	r2, [r3, #24]
 8001a88:	e030      	b.n	8001aec <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d02c      	beq.n	8001aec <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d020      	beq.n	8001adc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001aa8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691a      	ldr	r2, [r3, #16]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0210 	orr.w	r2, r2, #16
 8001ab8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d114      	bne.n	8001aec <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0220 	orr.w	r2, r2, #32
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	e00b      	b.n	8001aec <HAL_FDCAN_Init+0x234>
 8001ad4:	08007214 	.word	0x08007214
 8001ad8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001afc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b04:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b14:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b16:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b20:	d115      	bne.n	8001b4e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b26:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b30:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	3b01      	subs	r3, #1
 8001b38:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001b3a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b42:	3b01      	subs	r3, #1
 8001b44:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001b4a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001b4c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b74:	4413      	add	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d011      	beq.n	8001b9e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001b82:	f023 0107 	bic.w	r1, r3, #7
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	3360      	adds	r3, #96	@ 0x60
 8001b8e:	443b      	add	r3, r7
 8001b90:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d011      	beq.n	8001bca <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001bae:	f023 0107 	bic.w	r1, r3, #7
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	3360      	adds	r3, #96	@ 0x60
 8001bba:	443b      	add	r3, r7
 8001bbc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d012      	beq.n	8001bf8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001bda:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	3360      	adds	r3, #96	@ 0x60
 8001be6:	443b      	add	r3, r7
 8001be8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001bec:	011a      	lsls	r2, r3, #4
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d012      	beq.n	8001c26 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001c08:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	3360      	adds	r3, #96	@ 0x60
 8001c14:	443b      	add	r3, r7
 8001c16:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c1a:	021a      	lsls	r2, r3, #8
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <HAL_FDCAN_Init+0x3b8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d107      	bne.n	8001c40 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f022 0203 	bic.w	r2, r2, #3
 8001c3e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f891 	bl	8001d80 <FDCAN_CalcultateRamBlockAddresses>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8001c64:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3760      	adds	r7, #96	@ 0x60
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	4000a000 	.word	0x4000a000

08001c74 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d111      	bne.n	8001cac <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e008      	b.n	8001cbe <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cb2:	f043 0204 	orr.w	r2, r3, #4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	60f8      	str	r0, [r7, #12]
 8001cd2:	60b9      	str	r1, [r7, #8]
 8001cd4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d141      	bne.n	8001d66 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cea:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001cf8:	f043 0220 	orr.w	r2, r3, #32
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e038      	b.n	8001d78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e026      	b.n	8001d78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f9a3 	bl	800208c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e008      	b.n	8001d78 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d6c:	f043 0208 	orr.w	r2, r3, #8
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
  }
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001d96:	4ba7      	ldr	r3, [pc, #668]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	0091      	lsls	r1, r2, #2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001db0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db8:	041a      	lsls	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001dd6:	4b97      	ldr	r3, [pc, #604]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	0091      	lsls	r1, r2, #2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	430b      	orrs	r3, r1
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df0:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8001e18:	4b86      	ldr	r3, [pc, #536]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	0091      	lsls	r1, r2, #2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001e32:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	041a      	lsls	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e4e:	fb02 f303 	mul.w	r3, r2, r3
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	4413      	add	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e60:	4b74      	ldr	r3, [pc, #464]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	0091      	lsls	r1, r2, #2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001e7a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e82:	041a      	lsls	r2, r3, #16
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8001ea8:	4b62      	ldr	r3, [pc, #392]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	0091      	lsls	r1, r2, #2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001ec2:	fb02 f303 	mul.w	r3, r2, r3
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001ed4:	4b57      	ldr	r3, [pc, #348]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	0091      	lsls	r1, r2, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eee:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001f16:	4b47      	ldr	r3, [pc, #284]	@ (8002034 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	0091      	lsls	r1, r2, #2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	430b      	orrs	r3, r1
 8001f24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f30:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001f4c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f54:	061a      	lsls	r2, r3, #24
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f64:	4b34      	ldr	r3, [pc, #208]	@ (8002038 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	441a      	add	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8001fb8:	441a      	add	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8001fd0:	441a      	add	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002016:	fb01 f303 	mul.w	r3, r1, r3
 800201a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202a:	4a04      	ldr	r2, [pc, #16]	@ (800203c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d915      	bls.n	800205c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002030:	e006      	b.n	8002040 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002032:	bf00      	nop
 8002034:	ffff0003 	.word	0xffff0003
 8002038:	10002b00 	.word	0x10002b00
 800203c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002046:	f043 0220 	orr.w	r2, r3, #32
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e010      	b.n	800207e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e005      	b.n	8002070 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3304      	adds	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d3f3      	bcc.n	8002064 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop

0800208c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10a      	bne.n	80020b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80020aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	e00a      	b.n	80020ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80020c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80020c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80020c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80020de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80020e4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020fa:	6839      	ldr	r1, [r7, #0]
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	3304      	adds	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	3304      	adds	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e020      	b.n	8002166 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	3303      	adds	r3, #3
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3302      	adds	r3, #2
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	440b      	add	r3, r1
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800213c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	440b      	add	r3, r1
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800214a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	440a      	add	r2, r1
 8002152:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002154:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3304      	adds	r3, #4
 800215e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3304      	adds	r3, #4
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <FDCAN_CopyMessageToRAM+0xf8>)
 800216c:	5cd3      	ldrb	r3, [r2, r3]
 800216e:	461a      	mov	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	4293      	cmp	r3, r2
 8002174:	d3d6      	bcc.n	8002124 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	@ 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	0800727c 	.word	0x0800727c

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002196:	4b89      	ldr	r3, [pc, #548]	@ (80023bc <HAL_GPIO_Init+0x234>)
 8002198:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800219a:	e194      	b.n	80024c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 8186 	beq.w	80024c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d005      	beq.n	80021cc <HAL_GPIO_Init+0x44>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d130      	bne.n	800222e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002202:	2201      	movs	r2, #1
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0201 	and.w	r2, r3, #1
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b03      	cmp	r3, #3
 8002238:	d017      	beq.n	800226a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d123      	bne.n	80022be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	08da      	lsrs	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3208      	adds	r2, #8
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	220f      	movs	r2, #15
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	08da      	lsrs	r2, r3, #3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3208      	adds	r2, #8
 80022b8:	69b9      	ldr	r1, [r7, #24]
 80022ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0203 	and.w	r2, r3, #3
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80e0 	beq.w	80024c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002300:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <HAL_GPIO_Init+0x238>)
 8002302:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002306:	4a2e      	ldr	r2, [pc, #184]	@ (80023c0 <HAL_GPIO_Init+0x238>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_GPIO_Init+0x238>)
 8002312:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231e:	4a29      	ldr	r2, [pc, #164]	@ (80023c4 <HAL_GPIO_Init+0x23c>)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	089b      	lsrs	r3, r3, #2
 8002324:	3302      	adds	r3, #2
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	220f      	movs	r2, #15
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a20      	ldr	r2, [pc, #128]	@ (80023c8 <HAL_GPIO_Init+0x240>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d052      	beq.n	80023f0 <HAL_GPIO_Init+0x268>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a1f      	ldr	r2, [pc, #124]	@ (80023cc <HAL_GPIO_Init+0x244>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_GPIO_Init+0x22e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1e      	ldr	r2, [pc, #120]	@ (80023d0 <HAL_GPIO_Init+0x248>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02b      	beq.n	80023b2 <HAL_GPIO_Init+0x22a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a1d      	ldr	r2, [pc, #116]	@ (80023d4 <HAL_GPIO_Init+0x24c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d025      	beq.n	80023ae <HAL_GPIO_Init+0x226>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1c      	ldr	r2, [pc, #112]	@ (80023d8 <HAL_GPIO_Init+0x250>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01f      	beq.n	80023aa <HAL_GPIO_Init+0x222>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1b      	ldr	r2, [pc, #108]	@ (80023dc <HAL_GPIO_Init+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d019      	beq.n	80023a6 <HAL_GPIO_Init+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a1a      	ldr	r2, [pc, #104]	@ (80023e0 <HAL_GPIO_Init+0x258>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_GPIO_Init+0x21a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a19      	ldr	r2, [pc, #100]	@ (80023e4 <HAL_GPIO_Init+0x25c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00d      	beq.n	800239e <HAL_GPIO_Init+0x216>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a18      	ldr	r2, [pc, #96]	@ (80023e8 <HAL_GPIO_Init+0x260>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x212>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a17      	ldr	r2, [pc, #92]	@ (80023ec <HAL_GPIO_Init+0x264>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d101      	bne.n	8002396 <HAL_GPIO_Init+0x20e>
 8002392:	2309      	movs	r3, #9
 8002394:	e02d      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 8002396:	230a      	movs	r3, #10
 8002398:	e02b      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 800239a:	2308      	movs	r3, #8
 800239c:	e029      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 800239e:	2307      	movs	r3, #7
 80023a0:	e027      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e025      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e023      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e021      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e01f      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e01d      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e01b      	b.n	80023f2 <HAL_GPIO_Init+0x26a>
 80023ba:	bf00      	nop
 80023bc:	58000080 	.word	0x58000080
 80023c0:	58024400 	.word	0x58024400
 80023c4:	58000400 	.word	0x58000400
 80023c8:	58020000 	.word	0x58020000
 80023cc:	58020400 	.word	0x58020400
 80023d0:	58020800 	.word	0x58020800
 80023d4:	58020c00 	.word	0x58020c00
 80023d8:	58021000 	.word	0x58021000
 80023dc:	58021400 	.word	0x58021400
 80023e0:	58021800 	.word	0x58021800
 80023e4:	58021c00 	.word	0x58021c00
 80023e8:	58022000 	.word	0x58022000
 80023ec:	58022400 	.word	0x58022400
 80023f0:	2300      	movs	r3, #0
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002402:	4938      	ldr	r1, [pc, #224]	@ (80024e4 <HAL_GPIO_Init+0x35c>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002436:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f47f ae63 	bne.w	800219c <HAL_GPIO_Init+0x14>
  }
}
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	3724      	adds	r7, #36	@ 0x24
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	58000400 	.word	0x58000400

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002504:	e003      	b.n	800250e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	041a      	lsls	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800252c:	887a      	ldrh	r2, [r7, #2]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4013      	ands	r3, r2
 8002532:	041a      	lsls	r2, r3, #16
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43d9      	mvns	r1, r3
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	400b      	ands	r3, r1
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002558:	4a08      	ldr	r2, [pc, #32]	@ (800257c <HAL_HSEM_FastTake+0x2c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3320      	adds	r3, #32
 800255e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002562:	4a07      	ldr	r2, [pc, #28]	@ (8002580 <HAL_HSEM_FastTake+0x30>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d101      	bne.n	800256c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	58026400 	.word	0x58026400
 8002580:	80000300 	.word	0x80000300

08002584 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800258e:	4906      	ldr	r1, [pc, #24]	@ (80025a8 <HAL_HSEM_Release+0x24>)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	58026400 	.word	0x58026400

080025ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025b4:	4b29      	ldr	r3, [pc, #164]	@ (800265c <HAL_PWREx_ConfigSupply+0xb0>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	2b06      	cmp	r3, #6
 80025be:	d00a      	beq.n	80025d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025c0:	4b26      	ldr	r3, [pc, #152]	@ (800265c <HAL_PWREx_ConfigSupply+0xb0>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d001      	beq.n	80025d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e040      	b.n	8002654 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e03e      	b.n	8002654 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_PWREx_ConfigSupply+0xb0>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025de:	491f      	ldr	r1, [pc, #124]	@ (800265c <HAL_PWREx_ConfigSupply+0xb0>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025e6:	f7fe ff97 	bl	8001518 <HAL_GetTick>
 80025ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025ec:	e009      	b.n	8002602 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025ee:	f7fe ff93 	bl	8001518 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025fc:	d901      	bls.n	8002602 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e028      	b.n	8002654 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <HAL_PWREx_ConfigSupply+0xb0>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800260e:	d1ee      	bne.n	80025ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b1e      	cmp	r3, #30
 8002614:	d008      	beq.n	8002628 <HAL_PWREx_ConfigSupply+0x7c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b2e      	cmp	r3, #46	@ 0x2e
 800261a:	d005      	beq.n	8002628 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b1d      	cmp	r3, #29
 8002620:	d002      	beq.n	8002628 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b2d      	cmp	r3, #45	@ 0x2d
 8002626:	d114      	bne.n	8002652 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002628:	f7fe ff76 	bl	8001518 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800262e:	e009      	b.n	8002644 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002630:	f7fe ff72 	bl	8001518 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800263e:	d901      	bls.n	8002644 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e007      	b.n	8002654 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_PWREx_ConfigSupply+0xb0>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800264c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002650:	d1ee      	bne.n	8002630 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	58024800 	.word	0x58024800

08002660 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f000 bc48 	b.w	8002f04 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8088 	beq.w	8002792 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b99      	ldr	r3, [pc, #612]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268c:	4b96      	ldr	r3, [pc, #600]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	2b10      	cmp	r3, #16
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x48>
 8002698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269a:	2b18      	cmp	r3, #24
 800269c:	d111      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62>
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d06d      	beq.n	8002790 <HAL_RCC_OscConfig+0x130>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d169      	bne.n	8002790 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f000 bc21 	b.w	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ca:	d106      	bne.n	80026da <HAL_RCC_OscConfig+0x7a>
 80026cc:	4b86      	ldr	r3, [pc, #536]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a85      	ldr	r2, [pc, #532]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e02e      	b.n	8002738 <HAL_RCC_OscConfig+0xd8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x9c>
 80026e2:	4b81      	ldr	r3, [pc, #516]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a80      	ldr	r2, [pc, #512]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b7e      	ldr	r3, [pc, #504]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7d      	ldr	r2, [pc, #500]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e01d      	b.n	8002738 <HAL_RCC_OscConfig+0xd8>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0xc0>
 8002706:	4b78      	ldr	r3, [pc, #480]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a77      	ldr	r2, [pc, #476]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800270c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b75      	ldr	r3, [pc, #468]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a74      	ldr	r2, [pc, #464]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	e00b      	b.n	8002738 <HAL_RCC_OscConfig+0xd8>
 8002720:	4b71      	ldr	r3, [pc, #452]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a70      	ldr	r2, [pc, #448]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a6d      	ldr	r2, [pc, #436]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d013      	beq.n	8002768 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe feea 	bl	8001518 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002748:	f7fe fee6 	bl	8001518 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	@ 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e3d4      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800275a:	4b63      	ldr	r3, [pc, #396]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0xe8>
 8002766:	e014      	b.n	8002792 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe fed6 	bl	8001518 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002770:	f7fe fed2 	bl	8001518 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b64      	cmp	r3, #100	@ 0x64
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e3c0      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002782:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x110>
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80ca 	beq.w	8002934 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027a0:	4b51      	ldr	r3, [pc, #324]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027aa:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d007      	beq.n	80027c6 <HAL_RCC_OscConfig+0x166>
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	2b18      	cmp	r3, #24
 80027ba:	d156      	bne.n	800286a <HAL_RCC_OscConfig+0x20a>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d151      	bne.n	800286a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c6:	4b48      	ldr	r3, [pc, #288]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x17e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e392      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027de:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 0219 	bic.w	r2, r3, #25
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	493f      	ldr	r1, [pc, #252]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fe92 	bl	8001518 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f8:	f7fe fe8e 	bl	8001518 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e37c      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	f7fe feaf 	bl	8001578 <HAL_GetREVID>
 800281a:	4603      	mov	r3, r0
 800281c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002820:	4293      	cmp	r3, r2
 8002822:	d817      	bhi.n	8002854 <HAL_RCC_OscConfig+0x1f4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b40      	cmp	r3, #64	@ 0x40
 800282a:	d108      	bne.n	800283e <HAL_RCC_OscConfig+0x1de>
 800282c:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002834:	4a2c      	ldr	r2, [pc, #176]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	e07a      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	031b      	lsls	r3, r3, #12
 800284c:	4926      	ldr	r1, [pc, #152]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002852:	e06f      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	4921      	ldr	r1, [pc, #132]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	e064      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d047      	beq.n	8002902 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 0219 	bic.w	r2, r3, #25
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	491a      	ldr	r1, [pc, #104]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fe48 	bl	8001518 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7fe fe44 	bl	8001518 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e332      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289e:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028aa:	f7fe fe65 	bl	8001578 <HAL_GetREVID>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d819      	bhi.n	80028ec <HAL_RCC_OscConfig+0x28c>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b40      	cmp	r3, #64	@ 0x40
 80028be:	d108      	bne.n	80028d2 <HAL_RCC_OscConfig+0x272>
 80028c0:	4b09      	ldr	r3, [pc, #36]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028c8:	4a07      	ldr	r2, [pc, #28]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ce:	6053      	str	r3, [r2, #4]
 80028d0:	e030      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 80028d2:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	031b      	lsls	r3, r3, #12
 80028e0:	4901      	ldr	r1, [pc, #4]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	604b      	str	r3, [r1, #4]
 80028e6:	e025      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 80028e8:	58024400 	.word	0x58024400
 80028ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	4997      	ldr	r1, [pc, #604]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e018      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b95      	ldr	r3, [pc, #596]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a94      	ldr	r2, [pc, #592]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fe03 	bl	8001518 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002916:	f7fe fdff 	bl	8001518 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2ed      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002928:	4b8b      	ldr	r3, [pc, #556]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a9 	beq.w	8002a94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b85      	ldr	r3, [pc, #532]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800294a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800294c:	4b82      	ldr	r3, [pc, #520]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d007      	beq.n	8002968 <HAL_RCC_OscConfig+0x308>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b18      	cmp	r3, #24
 800295c:	d13a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x374>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d135      	bne.n	80029d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002968:	4b7b      	ldr	r3, [pc, #492]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b80      	cmp	r3, #128	@ 0x80
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e2c1      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002980:	f7fe fdfa 	bl	8001578 <HAL_GetREVID>
 8002984:	4603      	mov	r3, r0
 8002986:	f241 0203 	movw	r2, #4099	@ 0x1003
 800298a:	4293      	cmp	r3, r2
 800298c:	d817      	bhi.n	80029be <HAL_RCC_OscConfig+0x35e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2b20      	cmp	r3, #32
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_OscConfig+0x348>
 8002996:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800299e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029a4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a6:	e075      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	4968      	ldr	r1, [pc, #416]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029bc:	e06a      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4962      	ldr	r1, [pc, #392]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d2:	e05f      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d042      	beq.n	8002a62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fd96 	bl	8001518 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029f0:	f7fe fd92 	bl	8001518 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e280      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a02:	4b55      	ldr	r3, [pc, #340]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0e:	f7fe fdb3 	bl	8001578 <HAL_GetREVID>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d817      	bhi.n	8002a4c <HAL_RCC_OscConfig+0x3ec>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d108      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3d6>
 8002a24:	4b4c      	ldr	r3, [pc, #304]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a32:	6053      	str	r3, [r2, #4]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
 8002a36:	4b48      	ldr	r3, [pc, #288]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	4944      	ldr	r1, [pc, #272]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 8002a4a:	e023      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
 8002a4c:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	493f      	ldr	r1, [pc, #252]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60cb      	str	r3, [r1, #12]
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fd53 	bl	8001518 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a76:	f7fe fd4f 	bl	8001518 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e23d      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d036      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d019      	beq.n	8002adc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fd30 	bl	8001518 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fd2c 	bl	8001518 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e21a      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x45c>
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fd16 	bl	8001518 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fd12 	bl	8001518 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e200      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d039      	beq.n	8002b8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fcf3 	bl	8001518 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b36:	f7fe fcef 	bl	8001518 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1dd      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4d6>
 8002b54:	e01b      	b.n	8002b8e <HAL_RCC_OscConfig+0x52e>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b5c:	4b9b      	ldr	r3, [pc, #620]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a9a      	ldr	r2, [pc, #616]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fcd6 	bl	8001518 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b70:	f7fe fcd2 	bl	8001518 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1c0      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b82:	4b92      	ldr	r3, [pc, #584]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8081 	beq.w	8002c9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a8b      	ldr	r2, [pc, #556]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fcb6 	bl	8001518 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe fcb2 	bl	8001518 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1a0      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc2:	4b83      	ldr	r3, [pc, #524]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x584>
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a7c      	ldr	r2, [pc, #496]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	e02d      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5a6>
 8002bec:	4b77      	ldr	r3, [pc, #476]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	4a76      	ldr	r2, [pc, #472]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf8:	4b74      	ldr	r3, [pc, #464]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a73      	ldr	r2, [pc, #460]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c04:	e01c      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c8>
 8002c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	4a6e      	ldr	r2, [pc, #440]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002c28:	4b68      	ldr	r3, [pc, #416]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a67      	ldr	r2, [pc, #412]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	4b65      	ldr	r3, [pc, #404]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a64      	ldr	r2, [pc, #400]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fc66 	bl	8001518 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe fc62 	bl	8001518 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e14e      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c66:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RCC_OscConfig+0x5f0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fc50 	bl	8001518 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fc4c 	bl	8001518 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e138      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c92:	4b4e      	ldr	r3, [pc, #312]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 812d 	beq.w	8002f02 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ca8:	4b48      	ldr	r3, [pc, #288]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cb0:	2b18      	cmp	r3, #24
 8002cb2:	f000 80bd 	beq.w	8002e30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	f040 809e 	bne.w	8002dfc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fc24 	bl	8001518 <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fc20 	bl	8001518 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e10e      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce6:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf2:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf6:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <HAL_RCC_OscConfig+0x774>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4931      	ldr	r1, [pc, #196]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	3b01      	subs	r3, #1
 8002d12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	025b      	lsls	r3, r3, #9
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	3b01      	subs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	3b01      	subs	r3, #1
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d3c:	4923      	ldr	r1, [pc, #140]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d42:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	4a21      	ldr	r2, [pc, #132]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_RCC_OscConfig+0x778>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d5a:	00d2      	lsls	r2, r2, #3
 8002d5c:	491b      	ldr	r1, [pc, #108]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	f023 020c 	bic.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4917      	ldr	r1, [pc, #92]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d74:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	f023 0202 	bic.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	4912      	ldr	r1, [pc, #72]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fba9 	bl	8001518 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc8:	e011      	b.n	8002dee <HAL_RCC_OscConfig+0x78e>
 8002dca:	bf00      	nop
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	58024800 	.word	0x58024800
 8002dd4:	fffffc0c 	.word	0xfffffc0c
 8002dd8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fb9c 	bl	8001518 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e08a      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dee:	4b47      	ldr	r3, [pc, #284]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x77c>
 8002dfa:	e082      	b.n	8002f02 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfc:	4b43      	ldr	r3, [pc, #268]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a42      	ldr	r2, [pc, #264]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fb86 	bl	8001518 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fb82 	bl	8001518 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e070      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e22:	4b3a      	ldr	r3, [pc, #232]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x7b0>
 8002e2e:	e068      	b.n	8002f02 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e30:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e36:	4b35      	ldr	r3, [pc, #212]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d031      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d12a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d122      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0a5b      	lsrs	r3, r3, #9
 8002e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0e1b      	lsrs	r3, r3, #24
 8002e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e02b      	b.n	8002f04 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eac:	4b17      	ldr	r3, [pc, #92]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb0:	08db      	lsrs	r3, r3, #3
 8002eb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eb6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d01f      	beq.n	8002f02 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ec2:	4b12      	ldr	r3, [pc, #72]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4a11      	ldr	r2, [pc, #68]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ece:	f7fe fb23 	bl	8001518 <HAL_GetTick>
 8002ed2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ed4:	bf00      	nop
 8002ed6:	f7fe fb1f 	bl	8001518 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d0f9      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ee4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f10 <HAL_RCC_OscConfig+0x8b0>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eee:	00d2      	lsls	r2, r2, #3
 8002ef0:	4906      	ldr	r1, [pc, #24]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ef6:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	4a04      	ldr	r2, [pc, #16]	@ (8002f0c <HAL_RCC_OscConfig+0x8ac>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3730      	adds	r7, #48	@ 0x30
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	ffff0007 	.word	0xffff0007

08002f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e19c      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b8a      	ldr	r3, [pc, #552]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 030f 	and.w	r3, r3, #15
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b87      	ldr	r3, [pc, #540]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 020f 	bic.w	r2, r3, #15
 8002f3e:	4985      	ldr	r1, [pc, #532]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b83      	ldr	r3, [pc, #524]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e184      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	4b7b      	ldr	r3, [pc, #492]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d908      	bls.n	8002f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f74:	4b78      	ldr	r3, [pc, #480]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4975      	ldr	r1, [pc, #468]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	4b70      	ldr	r3, [pc, #448]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d908      	bls.n	8002fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	496a      	ldr	r1, [pc, #424]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4b64      	ldr	r3, [pc, #400]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d908      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd0:	4b61      	ldr	r3, [pc, #388]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	495e      	ldr	r1, [pc, #376]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	4b59      	ldr	r3, [pc, #356]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d908      	bls.n	8003010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ffe:	4b56      	ldr	r3, [pc, #344]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4953      	ldr	r1, [pc, #332]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800300c:	4313      	orrs	r3, r2
 800300e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	4b4d      	ldr	r3, [pc, #308]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	429a      	cmp	r2, r3
 800302a:	d908      	bls.n	800303e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f023 020f 	bic.w	r2, r3, #15
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4947      	ldr	r1, [pc, #284]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800303a:	4313      	orrs	r3, r2
 800303c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d055      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800304a:	4b43      	ldr	r3, [pc, #268]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4940      	ldr	r1, [pc, #256]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003058:	4313      	orrs	r3, r2
 800305a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d107      	bne.n	8003074 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003064:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d121      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0f6      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d107      	bne.n	800308c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800307c:	4b36      	ldr	r3, [pc, #216]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d115      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e0ea      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003094:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0de      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d6      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030b4:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f023 0207 	bic.w	r2, r3, #7
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c6:	f7fe fa27 	bl	8001518 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030cc:	e00a      	b.n	80030e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ce:	f7fe fa23 	bl	8001518 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e0be      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d1eb      	bne.n	80030ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d010      	beq.n	8003124 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	429a      	cmp	r2, r3
 8003110:	d208      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003112:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f023 020f 	bic.w	r2, r3, #15
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	490e      	ldr	r1, [pc, #56]	@ (8003158 <HAL_RCC_ClockConfig+0x244>)
 8003120:	4313      	orrs	r3, r2
 8003122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d214      	bcs.n	800315c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 020f 	bic.w	r2, r3, #15
 800313a:	4906      	ldr	r1, [pc, #24]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4313      	orrs	r3, r2
 8003140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <HAL_RCC_ClockConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d005      	beq.n	800315c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e086      	b.n	8003262 <HAL_RCC_ClockConfig+0x34e>
 8003154:	52002000 	.word	0x52002000
 8003158:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d010      	beq.n	800318a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	4b3f      	ldr	r3, [pc, #252]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003174:	429a      	cmp	r2, r3
 8003176:	d208      	bcs.n	800318a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003178:	4b3c      	ldr	r3, [pc, #240]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	4939      	ldr	r1, [pc, #228]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003186:	4313      	orrs	r3, r2
 8003188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	4b34      	ldr	r3, [pc, #208]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d208      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031a6:	4b31      	ldr	r3, [pc, #196]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	492e      	ldr	r1, [pc, #184]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	4b28      	ldr	r3, [pc, #160]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d208      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031d4:	4b25      	ldr	r3, [pc, #148]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	4922      	ldr	r1, [pc, #136]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d010      	beq.n	8003214 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031fe:	429a      	cmp	r2, r3
 8003200:	d208      	bcs.n	8003214 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	4917      	ldr	r1, [pc, #92]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003210:	4313      	orrs	r3, r2
 8003212:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003214:	f000 f834 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b14      	ldr	r3, [pc, #80]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	4912      	ldr	r1, [pc, #72]	@ (8003270 <HAL_RCC_ClockConfig+0x35c>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
 8003230:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003232:	4b0e      	ldr	r3, [pc, #56]	@ (800326c <HAL_RCC_ClockConfig+0x358>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_RCC_ClockConfig+0x35c>)
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <HAL_RCC_ClockConfig+0x360>)
 800324a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800324c:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x364>)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_RCC_ClockConfig+0x368>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe f914 	bl	8001484 <HAL_InitTick>
 800325c:	4603      	mov	r3, r0
 800325e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58024400 	.word	0x58024400
 8003270:	08007260 	.word	0x08007260
 8003274:	24000004 	.word	0x24000004
 8003278:	24000000 	.word	0x24000000
 800327c:	24000024 	.word	0x24000024

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	b480      	push	{r7}
 8003282:	b089      	sub	sp, #36	@ 0x24
 8003284:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003286:	4bb3      	ldr	r3, [pc, #716]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800328e:	2b18      	cmp	r3, #24
 8003290:	f200 8155 	bhi.w	800353e <HAL_RCC_GetSysClockFreq+0x2be>
 8003294:	a201      	add	r2, pc, #4	@ (adr r2, 800329c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	08003301 	.word	0x08003301
 80032a0:	0800353f 	.word	0x0800353f
 80032a4:	0800353f 	.word	0x0800353f
 80032a8:	0800353f 	.word	0x0800353f
 80032ac:	0800353f 	.word	0x0800353f
 80032b0:	0800353f 	.word	0x0800353f
 80032b4:	0800353f 	.word	0x0800353f
 80032b8:	0800353f 	.word	0x0800353f
 80032bc:	08003327 	.word	0x08003327
 80032c0:	0800353f 	.word	0x0800353f
 80032c4:	0800353f 	.word	0x0800353f
 80032c8:	0800353f 	.word	0x0800353f
 80032cc:	0800353f 	.word	0x0800353f
 80032d0:	0800353f 	.word	0x0800353f
 80032d4:	0800353f 	.word	0x0800353f
 80032d8:	0800353f 	.word	0x0800353f
 80032dc:	0800332d 	.word	0x0800332d
 80032e0:	0800353f 	.word	0x0800353f
 80032e4:	0800353f 	.word	0x0800353f
 80032e8:	0800353f 	.word	0x0800353f
 80032ec:	0800353f 	.word	0x0800353f
 80032f0:	0800353f 	.word	0x0800353f
 80032f4:	0800353f 	.word	0x0800353f
 80032f8:	0800353f 	.word	0x0800353f
 80032fc:	08003333 	.word	0x08003333
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003300:	4b94      	ldr	r3, [pc, #592]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0320 	and.w	r3, r3, #32
 8003308:	2b00      	cmp	r3, #0
 800330a:	d009      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800330c:	4b91      	ldr	r3, [pc, #580]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	4a90      	ldr	r2, [pc, #576]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003318:	fa22 f303 	lsr.w	r3, r2, r3
 800331c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800331e:	e111      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003320:	4b8d      	ldr	r3, [pc, #564]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003322:	61bb      	str	r3, [r7, #24]
      break;
 8003324:	e10e      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003326:	4b8d      	ldr	r3, [pc, #564]	@ (800355c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003328:	61bb      	str	r3, [r7, #24]
      break;
 800332a:	e10b      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800332c:	4b8c      	ldr	r3, [pc, #560]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800332e:	61bb      	str	r3, [r7, #24]
      break;
 8003330:	e108      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003332:	4b88      	ldr	r3, [pc, #544]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800333c:	4b85      	ldr	r3, [pc, #532]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003346:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003348:	4b82      	ldr	r3, [pc, #520]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003352:	4b80      	ldr	r3, [pc, #512]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003356:	08db      	lsrs	r3, r3, #3
 8003358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80e1 	beq.w	8003538 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b02      	cmp	r3, #2
 800337a:	f000 8083 	beq.w	8003484 <HAL_RCC_GetSysClockFreq+0x204>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b02      	cmp	r3, #2
 8003382:	f200 80a1 	bhi.w	80034c8 <HAL_RCC_GetSysClockFreq+0x248>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x114>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d056      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003392:	e099      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003394:	4b6f      	ldr	r3, [pc, #444]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02d      	beq.n	80033fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ca:	4b62      	ldr	r3, [pc, #392]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033da:	ed97 6a02 	vldr	s12, [r7, #8]
 80033de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033fa:	e087      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003568 <HAL_RCC_GetSysClockFreq+0x2e8>
 800340a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340e:	4b51      	ldr	r3, [pc, #324]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003422:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800343e:	e065      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800356c <HAL_RCC_GetSysClockFreq+0x2ec>
 800344e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003452:	4b40      	ldr	r3, [pc, #256]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003462:	ed97 6a02 	vldr	s12, [r7, #8]
 8003466:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 800346a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003482:	e043      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003570 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003496:	4b2f      	ldr	r3, [pc, #188]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349e:	ee07 3a90 	vmov	s15, r3
 80034a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c6:	e021      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800356c <HAL_RCC_GetSysClockFreq+0x2ec>
 80034d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034da:	4b1e      	ldr	r3, [pc, #120]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800350a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800350c:	4b11      	ldr	r3, [pc, #68]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003510:	0a5b      	lsrs	r3, r3, #9
 8003512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003516:	3301      	adds	r3, #1
 8003518:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003524:	edd7 6a07 	vldr	s13, [r7, #28]
 8003528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800352c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003530:	ee17 3a90 	vmov	r3, s15
 8003534:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003536:	e005      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
      break;
 800353c:	e002      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800353e:	4b07      	ldr	r3, [pc, #28]	@ (800355c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003540:	61bb      	str	r3, [r7, #24]
      break;
 8003542:	bf00      	nop
  }

  return sysclockfreq;
 8003544:	69bb      	ldr	r3, [r7, #24]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	58024400 	.word	0x58024400
 8003558:	03d09000 	.word	0x03d09000
 800355c:	003d0900 	.word	0x003d0900
 8003560:	017d7840 	.word	0x017d7840
 8003564:	46000000 	.word	0x46000000
 8003568:	4c742400 	.word	0x4c742400
 800356c:	4a742400 	.word	0x4a742400
 8003570:	4bbebc20 	.word	0x4bbebc20

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800357a:	f7ff fe81 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800357e:	4602      	mov	r2, r0
 8003580:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	0a1b      	lsrs	r3, r3, #8
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	490f      	ldr	r1, [pc, #60]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800358c:	5ccb      	ldrb	r3, [r1, r3]
 800358e:	f003 031f 	and.w	r3, r3, #31
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	4a09      	ldr	r2, [pc, #36]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	f003 031f 	and.w	r3, r3, #31
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	fa22 f303 	lsr.w	r3, r2, r3
 80035ae:	4a07      	ldr	r2, [pc, #28]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x58>)
 80035b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035b2:	4a07      	ldr	r2, [pc, #28]	@ (80035d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035b8:	4b04      	ldr	r3, [pc, #16]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x58>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58024400 	.word	0x58024400
 80035c8:	08007260 	.word	0x08007260
 80035cc:	24000004 	.word	0x24000004
 80035d0:	24000000 	.word	0x24000000

080035d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035d8:	f7ff ffcc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b06      	ldr	r3, [pc, #24]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	4904      	ldr	r1, [pc, #16]	@ (80035fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	58024400 	.word	0x58024400
 80035fc:	08007260 	.word	0x08007260

08003600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003604:	f7ff ffb6 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	@ (8003628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	58024400 	.word	0x58024400
 8003628:	08007260 	.word	0x08007260

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b0ca      	sub	sp, #296	@ 0x128
 8003632:	af00      	add	r7, sp, #0
 8003634:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003638:	2300      	movs	r3, #0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363e:	2300      	movs	r3, #0
 8003640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003650:	2500      	movs	r5, #0
 8003652:	ea54 0305 	orrs.w	r3, r4, r5
 8003656:	d049      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800365e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003662:	d02f      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003664:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003668:	d828      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800366a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366e:	d01a      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003674:	d822      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800367a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367e:	d007      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003680:	e01c      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003682:	4bb8      	ldr	r3, [pc, #736]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	4ab7      	ldr	r2, [pc, #732]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800368c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800368e:	e01a      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003694:	3308      	adds	r3, #8
 8003696:	2102      	movs	r1, #2
 8003698:	4618      	mov	r0, r3
 800369a:	f001 fc8f 	bl	8004fbc <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	3328      	adds	r3, #40	@ 0x28
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 fd36 	bl	8005120 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036ce:	4ba5      	ldr	r3, [pc, #660]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036dc:	4aa1      	ldr	r2, [pc, #644]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80036e2:	e003      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036f8:	f04f 0900 	mov.w	r9, #0
 80036fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003700:	d047      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	2b04      	cmp	r3, #4
 800370a:	d82a      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003729 	.word	0x08003729
 8003718:	08003737 	.word	0x08003737
 800371c:	0800374d 	.word	0x0800374d
 8003720:	0800376b 	.word	0x0800376b
 8003724:	0800376b 	.word	0x0800376b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003728:	4b8e      	ldr	r3, [pc, #568]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	4a8d      	ldr	r2, [pc, #564]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003734:	e01a      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	3308      	adds	r3, #8
 800373c:	2100      	movs	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fc3c 	bl	8004fbc <RCCEx_PLL2_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800374a:	e00f      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fce3 	bl	8005120 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003760:	e004      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800376a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003774:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	f023 0107 	bic.w	r1, r3, #7
 800377c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	4a78      	ldr	r2, [pc, #480]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003784:	430b      	orrs	r3, r1
 8003786:	6513      	str	r3, [r2, #80]	@ 0x50
 8003788:	e003      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800379e:	f04f 0b00 	mov.w	fp, #0
 80037a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037a6:	d04c      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b2:	d030      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b8:	d829      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80037bc:	d02d      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037be:	2bc0      	cmp	r3, #192	@ 0xc0
 80037c0:	d825      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037c2:	2b80      	cmp	r3, #128	@ 0x80
 80037c4:	d018      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037c6:	2b80      	cmp	r3, #128	@ 0x80
 80037c8:	d821      	bhi.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d007      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037d2:	e01c      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d4:	4b63      	ldr	r3, [pc, #396]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	4a62      	ldr	r2, [pc, #392]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037e0:	e01c      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	3308      	adds	r3, #8
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 fbe6 	bl	8004fbc <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037f6:	e011      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	3328      	adds	r3, #40	@ 0x28
 80037fe:	2100      	movs	r1, #0
 8003800:	4618      	mov	r0, r3
 8003802:	f001 fc8d 	bl	8005120 <RCCEx_PLL3_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003814:	e002      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800381a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003824:	4b4f      	ldr	r3, [pc, #316]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003828:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	4a4c      	ldr	r2, [pc, #304]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003834:	430b      	orrs	r3, r1
 8003836:	6513      	str	r3, [r2, #80]	@ 0x50
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800384e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003858:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d053      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800386a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800386e:	d035      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003870:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003874:	d82e      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003876:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800387a:	d031      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800387c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003880:	d828      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003886:	d01a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003888:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800388c:	d822      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003892:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003896:	d007      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003898:	e01c      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800389a:	4b32      	ldr	r3, [pc, #200]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	4a31      	ldr	r2, [pc, #196]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a6:	e01c      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ac:	3308      	adds	r3, #8
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fb83 	bl	8004fbc <RCCEx_PLL2_Config>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038bc:	e011      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	3328      	adds	r3, #40	@ 0x28
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fc2a 	bl	8005120 <RCCEx_PLL3_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d2:	e006      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038da:	e002      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10b      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003900:	e003      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800390a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003912:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003916:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800391a:	2300      	movs	r3, #0
 800391c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003920:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d056      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003932:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003936:	d038      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003938:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800393c:	d831      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800393e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003942:	d034      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003944:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003948:	d82b      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800394a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394e:	d01d      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003954:	d825      	bhi.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d006      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800395a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003960:	e01f      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4ba2      	ldr	r3, [pc, #648]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4aa1      	ldr	r2, [pc, #644]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003974:	e01c      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397a:	3308      	adds	r3, #8
 800397c:	2100      	movs	r1, #0
 800397e:	4618      	mov	r0, r3
 8003980:	f001 fb1c 	bl	8004fbc <RCCEx_PLL2_Config>
 8003984:	4603      	mov	r3, r0
 8003986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800398a:	e011      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	3328      	adds	r3, #40	@ 0x28
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fbc3 	bl	8005120 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039a0:	e006      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a8:	e002      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039aa:	bf00      	nop
 80039ac:	e000      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039b8:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039c8:	4a8a      	ldr	r2, [pc, #552]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d03a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	2b30      	cmp	r3, #48	@ 0x30
 8003a00:	d01f      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a02:	2b30      	cmp	r3, #48	@ 0x30
 8003a04:	d819      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d00c      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d815      	bhi.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d019      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d111      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a16:	4b77      	ldr	r3, [pc, #476]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	4a76      	ldr	r2, [pc, #472]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a22:	e011      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 fac5 	bl	8004fbc <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a50:	4b68      	ldr	r3, [pc, #416]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5e:	4a65      	ldr	r2, [pc, #404]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a64:	e003      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a76:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	d051      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a98:	d035      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a9e:	d82e      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aa0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aa4:	d031      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003aa6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aaa:	d828      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab0:	d01a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab6:	d822      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac0:	d007      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003ac2:	e01c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ad0:	e01c      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fa6e 	bl	8004fbc <RCCEx_PLL2_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae6:	e011      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	3328      	adds	r3, #40	@ 0x28
 8003aee:	2100      	movs	r1, #0
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 fb15 	bl	8005120 <RCCEx_PLL3_Config>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003afc:	e006      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b04:	e002      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b14:	4b37      	ldr	r3, [pc, #220]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b18:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b22:	4a34      	ldr	r2, [pc, #208]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b28:	e003      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b42:	2300      	movs	r3, #0
 8003b44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d056      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5c:	d033      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b62:	d82c      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b68:	d02f      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b6e:	d826      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b70:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b74:	d02b      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b7a:	d820      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b80:	d012      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b86:	d81a      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d115      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	3308      	adds	r3, #8
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f001 fa0e 	bl	8004fbc <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ba6:	e015      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	3328      	adds	r3, #40	@ 0x28
 8003bae:	2101      	movs	r1, #1
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 fab5 	bl	8005120 <RCCEx_PLL3_Config>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc4:	e006      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bea:	4a02      	ldr	r2, [pc, #8]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bf0:	e006      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bf2:	bf00      	nop
 8003bf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d055      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2c:	d033      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c32:	d82c      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d02f      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3e:	d826      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c44:	d02b      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c4a:	d820      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c50:	d012      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c56:	d81a      	bhi.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d022      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c60:	d115      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	3308      	adds	r3, #8
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 f9a6 	bl	8004fbc <RCCEx_PLL2_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c76:	e015      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	3328      	adds	r3, #40	@ 0x28
 8003c7e:	2101      	movs	r1, #1
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 fa4d 	bl	8005120 <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c94:	e006      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c96:	bf00      	nop
 8003c98:	e004      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cac:	4ba3      	ldr	r3, [pc, #652]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cbc:	4a9f      	ldr	r2, [pc, #636]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d037      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf6:	d00e      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cfc:	d816      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d018      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d06:	d111      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d08:	4b8c      	ldr	r3, [pc, #560]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	4a8b      	ldr	r2, [pc, #556]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d14:	e00f      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f94c 	bl	8004fbc <RCCEx_PLL2_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d2a:	e004      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d32:	e000      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d42:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a7b      	ldr	r2, [pc, #492]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d64:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d039      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d81c      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d86:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003dab 	.word	0x08003dab
 8003d98:	08003dc9 	.word	0x08003dc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9c:	4b67      	ldr	r3, [pc, #412]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da0:	4a66      	ldr	r2, [pc, #408]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3308      	adds	r3, #8
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f902 	bl	8004fbc <RCCEx_PLL2_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	f023 0103 	bic.w	r1, r3, #3
 8003dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003de0:	4a56      	ldr	r2, [pc, #344]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f000 809f 	beq.w	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e12:	4b4b      	ldr	r3, [pc, #300]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1e:	f7fd fb7b 	bl	8001518 <HAL_GetTick>
 8003e22:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e26:	e00b      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fd fb76 	bl	8001518 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	@ 0x64
 8003e36:	d903      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3e:	e005      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e40:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0ed      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d179      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e54:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e56:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e60:	4053      	eors	r3, r2
 8003e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d015      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e6a:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e76:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e82:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ea2:	d118      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fb38 	bl	8001518 <HAL_GetTick>
 8003ea8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eac:	e00d      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fd fb33 	bl	8001518 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eb8:	1ad2      	subs	r2, r2, r3
 8003eba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d903      	bls.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ec8:	e005      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eca:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0eb      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d129      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eee:	d10e      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f00:	091a      	lsrs	r2, r3, #4
 8003f02:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	4a0d      	ldr	r2, [pc, #52]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	6113      	str	r3, [r2, #16]
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	4a0a      	ldr	r2, [pc, #40]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f18:	6113      	str	r3, [r2, #16]
 8003f1a:	4b08      	ldr	r3, [pc, #32]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f1c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f30:	e00e      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f3c:	58024400 	.word	0x58024400
 8003f40:	58024800 	.word	0x58024800
 8003f44:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 0301 	and.w	r3, r2, #1
 8003f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f000 8089 	beq.w	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f78:	2b28      	cmp	r3, #40	@ 0x28
 8003f7a:	d86b      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	0800405d 	.word	0x0800405d
 8003f88:	08004055 	.word	0x08004055
 8003f8c:	08004055 	.word	0x08004055
 8003f90:	08004055 	.word	0x08004055
 8003f94:	08004055 	.word	0x08004055
 8003f98:	08004055 	.word	0x08004055
 8003f9c:	08004055 	.word	0x08004055
 8003fa0:	08004055 	.word	0x08004055
 8003fa4:	08004029 	.word	0x08004029
 8003fa8:	08004055 	.word	0x08004055
 8003fac:	08004055 	.word	0x08004055
 8003fb0:	08004055 	.word	0x08004055
 8003fb4:	08004055 	.word	0x08004055
 8003fb8:	08004055 	.word	0x08004055
 8003fbc:	08004055 	.word	0x08004055
 8003fc0:	08004055 	.word	0x08004055
 8003fc4:	0800403f 	.word	0x0800403f
 8003fc8:	08004055 	.word	0x08004055
 8003fcc:	08004055 	.word	0x08004055
 8003fd0:	08004055 	.word	0x08004055
 8003fd4:	08004055 	.word	0x08004055
 8003fd8:	08004055 	.word	0x08004055
 8003fdc:	08004055 	.word	0x08004055
 8003fe0:	08004055 	.word	0x08004055
 8003fe4:	0800405d 	.word	0x0800405d
 8003fe8:	08004055 	.word	0x08004055
 8003fec:	08004055 	.word	0x08004055
 8003ff0:	08004055 	.word	0x08004055
 8003ff4:	08004055 	.word	0x08004055
 8003ff8:	08004055 	.word	0x08004055
 8003ffc:	08004055 	.word	0x08004055
 8004000:	08004055 	.word	0x08004055
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004055 	.word	0x08004055
 800400c:	08004055 	.word	0x08004055
 8004010:	08004055 	.word	0x08004055
 8004014:	08004055 	.word	0x08004055
 8004018:	08004055 	.word	0x08004055
 800401c:	08004055 	.word	0x08004055
 8004020:	08004055 	.word	0x08004055
 8004024:	0800405d 	.word	0x0800405d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3308      	adds	r3, #8
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ffc3 	bl	8004fbc <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f86a 	bl	8005120 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10a      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004066:	4bbf      	ldr	r3, [pc, #764]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004074:	4abb      	ldr	r2, [pc, #748]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6553      	str	r3, [r2, #84]	@ 0x54
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004080:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408c:	f002 0302 	and.w	r3, r2, #2
 8004090:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800409a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800409e:	460b      	mov	r3, r1
 80040a0:	4313      	orrs	r3, r2
 80040a2:	d041      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d824      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040ae:	a201      	add	r2, pc, #4	@ (adr r2, 80040b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	08004101 	.word	0x08004101
 80040b8:	080040cd 	.word	0x080040cd
 80040bc:	080040e3 	.word	0x080040e3
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004101 	.word	0x08004101
 80040c8:	08004101 	.word	0x08004101
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d0:	3308      	adds	r3, #8
 80040d2:	2101      	movs	r1, #1
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 ff71 	bl	8004fbc <RCCEx_PLL2_Config>
 80040da:	4603      	mov	r3, r0
 80040dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040e0:	e00f      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	3328      	adds	r3, #40	@ 0x28
 80040e8:	2101      	movs	r1, #1
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f818 	bl	8005120 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040f6:	e004      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800410a:	4b96      	ldr	r3, [pc, #600]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800410c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410e:	f023 0107 	bic.w	r1, r3, #7
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004118:	4a92      	ldr	r2, [pc, #584]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800411a:	430b      	orrs	r3, r1
 800411c:	6553      	str	r3, [r2, #84]	@ 0x54
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	f002 0304 	and.w	r3, r2, #4
 8004134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004138:	2300      	movs	r3, #0
 800413a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800413e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004142:	460b      	mov	r3, r1
 8004144:	4313      	orrs	r3, r2
 8004146:	d044      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004150:	2b05      	cmp	r3, #5
 8004152:	d825      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004154:	a201      	add	r2, pc, #4	@ (adr r2, 800415c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	080041a9 	.word	0x080041a9
 8004160:	08004175 	.word	0x08004175
 8004164:	0800418b 	.word	0x0800418b
 8004168:	080041a9 	.word	0x080041a9
 800416c:	080041a9 	.word	0x080041a9
 8004170:	080041a9 	.word	0x080041a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 ff1d 	bl	8004fbc <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3328      	adds	r3, #40	@ 0x28
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ffc4 	bl	8005120 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f023 0107 	bic.w	r1, r3, #7
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c2:	4a68      	ldr	r2, [pc, #416]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f002 0320 	and.w	r3, r2, #32
 80041de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d055      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fe:	d033      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004200:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004204:	d82c      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d02f      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004210:	d826      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004212:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004216:	d02b      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004218:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800421c:	d820      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004222:	d012      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004228:	d81a      	bhi.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d022      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800422e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004232:	d115      	bne.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004238:	3308      	adds	r3, #8
 800423a:	2100      	movs	r1, #0
 800423c:	4618      	mov	r0, r3
 800423e:	f000 febd 	bl	8004fbc <RCCEx_PLL2_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004248:	e015      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	3328      	adds	r3, #40	@ 0x28
 8004250:	2102      	movs	r1, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f000 ff64 	bl	8005120 <RCCEx_PLL3_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800425e:	e00a      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004266:	e006      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004268:	bf00      	nop
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800426c:	bf00      	nop
 800426e:	e002      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004270:	bf00      	nop
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428e:	4a35      	ldr	r2, [pc, #212]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6553      	str	r3, [r2, #84]	@ 0x54
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d058      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042ca:	d033      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042d0:	d82c      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d6:	d02f      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042dc:	d826      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e2:	d02b      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e8:	d820      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ee:	d012      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f4:	d81a      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d022      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fe:	d115      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	3308      	adds	r3, #8
 8004306:	2100      	movs	r1, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe57 	bl	8004fbc <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004314:	e015      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431a:	3328      	adds	r3, #40	@ 0x28
 800431c:	2102      	movs	r1, #2
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fefe 	bl	8005120 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800432a:	e00a      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004332:	e006      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004334:	bf00      	nop
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10e      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800434a:	4b06      	ldr	r3, [pc, #24]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800435a:	4a02      	ldr	r2, [pc, #8]	@ (8004364 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800437c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004380:	2300      	movs	r3, #0
 8004382:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004386:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800438a:	460b      	mov	r3, r1
 800438c:	4313      	orrs	r3, r2
 800438e:	d055      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004398:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800439c:	d033      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800439e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043a2:	d82c      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a8:	d02f      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ae:	d826      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043b4:	d02b      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043b6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043ba:	d820      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c0:	d012      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c6:	d81a      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d022      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d0:	d115      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	3308      	adds	r3, #8
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fdee 	bl	8004fbc <RCCEx_PLL2_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043e6:	e015      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	3328      	adds	r3, #40	@ 0x28
 80043ee:	2102      	movs	r1, #2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fe95 	bl	8005120 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043fc:	e00a      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004404:	e006      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004406:	bf00      	nop
 8004408:	e004      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800440a:	bf00      	nop
 800440c:	e002      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800440e:	bf00      	nop
 8004410:	e000      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800441c:	4ba1      	ldr	r3, [pc, #644]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004420:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800442c:	4a9d      	ldr	r2, [pc, #628]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442e:	430b      	orrs	r3, r1
 8004430:	6593      	str	r3, [r2, #88]	@ 0x58
 8004432:	e003      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004444:	f002 0308 	and.w	r3, r2, #8
 8004448:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004452:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004456:	460b      	mov	r3, r1
 8004458:	4313      	orrs	r3, r2
 800445a:	d01e      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800445c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	3328      	adds	r3, #40	@ 0x28
 8004470:	2102      	movs	r1, #2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fe54 	bl	8005120 <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004484:	4b87      	ldr	r3, [pc, #540]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004488:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004494:	4a83      	ldr	r2, [pc, #524]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004496:	430b      	orrs	r3, r1
 8004498:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a2:	f002 0310 	and.w	r3, r2, #16
 80044a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044aa:	2300      	movs	r3, #0
 80044ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d01e      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c6:	d10c      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	2102      	movs	r1, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fe25 	bl	8005120 <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e2:	4b70      	ldr	r3, [pc, #448]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044f2:	4a6c      	ldr	r2, [pc, #432]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f4:	430b      	orrs	r3, r1
 80044f6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004508:	2300      	movs	r3, #0
 800450a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800450e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d03e      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004524:	d022      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800452a:	d81b      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	d00b      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004536:	e015      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	3308      	adds	r3, #8
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f000 fd3b 	bl	8004fbc <RCCEx_PLL2_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800454c:	e00f      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004552:	3328      	adds	r3, #40	@ 0x28
 8004554:	2102      	movs	r1, #2
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fde2 	bl	8005120 <RCCEx_PLL3_Config>
 800455c:	4603      	mov	r3, r0
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004562:	e004      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800456a:	e000      	b.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800456c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004576:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800457e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004586:	4a47      	ldr	r2, [pc, #284]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004588:	430b      	orrs	r3, r1
 800458a:	6593      	str	r3, [r2, #88]	@ 0x58
 800458c:	e003      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a4:	2300      	movs	r3, #0
 80045a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80045ac:	460b      	mov	r3, r1
 80045ae:	4313      	orrs	r3, r2
 80045b0:	d03b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045be:	d01f      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045c4:	d818      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045ca:	d003      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045d0:	d007      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045d2:	e011      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d4:	4b33      	ldr	r3, [pc, #204]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	4a32      	ldr	r2, [pc, #200]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045e0:	e00f      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e6:	3328      	adds	r3, #40	@ 0x28
 80045e8:	2101      	movs	r1, #1
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd98 	bl	8005120 <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045f6:	e004      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800460a:	4b26      	ldr	r3, [pc, #152]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	4a22      	ldr	r2, [pc, #136]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461c:	430b      	orrs	r3, r1
 800461e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004636:	673b      	str	r3, [r7, #112]	@ 0x70
 8004638:	2300      	movs	r3, #0
 800463a:	677b      	str	r3, [r7, #116]	@ 0x74
 800463c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d034      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d007      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004656:	e011      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	4a11      	ldr	r2, [pc, #68]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004664:	e00e      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	3308      	adds	r3, #8
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fca4 	bl	8004fbc <RCCEx_PLL2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800467a:	e003      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10d      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004690:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	4a02      	ldr	r2, [pc, #8]	@ (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469c:	430b      	orrs	r3, r1
 800469e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046a2:	bf00      	nop
 80046a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046be:	2300      	movs	r3, #0
 80046c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80046c6:	460b      	mov	r3, r1
 80046c8:	4313      	orrs	r3, r2
 80046ca:	d00c      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	3328      	adds	r3, #40	@ 0x28
 80046d2:	2102      	movs	r1, #2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd23 	bl	8005120 <RCCEx_PLL3_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80046f4:	2300      	movs	r3, #0
 80046f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80046f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046fc:	460b      	mov	r3, r1
 80046fe:	4313      	orrs	r3, r2
 8004700:	d038      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800470a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470e:	d018      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004710:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004714:	d811      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471a:	d014      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800471c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004720:	d80b      	bhi.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472a:	d106      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472c:	4bc3      	ldr	r3, [pc, #780]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4ac2      	ldr	r2, [pc, #776]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004732:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004736:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004738:	e008      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004740:	e004      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800474a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800474c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004754:	4bb9      	ldr	r3, [pc, #740]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004764:	4ab5      	ldr	r2, [pc, #724]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004766:	430b      	orrs	r3, r1
 8004768:	6553      	str	r3, [r2, #84]	@ 0x54
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004780:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004782:	2300      	movs	r3, #0
 8004784:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004786:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800478a:	460b      	mov	r3, r1
 800478c:	4313      	orrs	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004790:	4baa      	ldr	r3, [pc, #680]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004794:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479e:	4aa7      	ldr	r2, [pc, #668]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b2:	2300      	movs	r3, #0
 80047b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047c0:	4b9e      	ldr	r3, [pc, #632]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047d0:	4a9a      	ldr	r2, [pc, #616]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d2:	430b      	orrs	r3, r1
 80047d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e4:	2300      	movs	r3, #0
 80047e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047f2:	4b92      	ldr	r3, [pc, #584]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004800:	4a8e      	ldr	r2, [pc, #568]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004802:	430b      	orrs	r3, r1
 8004804:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004812:	643b      	str	r3, [r7, #64]	@ 0x40
 8004814:	2300      	movs	r3, #0
 8004816:	647b      	str	r3, [r7, #68]	@ 0x44
 8004818:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800481c:	460b      	mov	r3, r1
 800481e:	4313      	orrs	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004822:	4b86      	ldr	r3, [pc, #536]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4a85      	ldr	r2, [pc, #532]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004828:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800482c:	6113      	str	r3, [r2, #16]
 800482e:	4b83      	ldr	r3, [pc, #524]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004830:	6919      	ldr	r1, [r3, #16]
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800483a:	4a80      	ldr	r2, [pc, #512]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800484c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800484e:	2300      	movs	r3, #0
 8004850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004852:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004856:	460b      	mov	r3, r1
 8004858:	4313      	orrs	r3, r2
 800485a:	d009      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800485c:	4b77      	ldr	r3, [pc, #476]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004860:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486a:	4a74      	ldr	r2, [pc, #464]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800486c:	430b      	orrs	r3, r1
 800486e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800487c:	633b      	str	r3, [r7, #48]	@ 0x30
 800487e:	2300      	movs	r3, #0
 8004880:	637b      	str	r3, [r7, #52]	@ 0x34
 8004882:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800488c:	4b6b      	ldr	r3, [pc, #428]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489c:	4a67      	ldr	r2, [pc, #412]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489e:	430b      	orrs	r3, r1
 80048a0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	2100      	movs	r1, #0
 80048ac:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048b8:	460b      	mov	r3, r1
 80048ba:	4313      	orrs	r3, r2
 80048bc:	d011      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	3308      	adds	r3, #8
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fb78 	bl	8004fbc <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	2100      	movs	r1, #0
 80048ec:	6239      	str	r1, [r7, #32]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	3308      	adds	r3, #8
 8004904:	2101      	movs	r1, #1
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb58 	bl	8004fbc <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	2100      	movs	r1, #0
 800492c:	61b9      	str	r1, [r7, #24]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	3308      	adds	r3, #8
 8004944:	2102      	movs	r1, #2
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fb38 	bl	8004fbc <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	2100      	movs	r1, #0
 800496c:	6139      	str	r1, [r7, #16]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	3328      	adds	r3, #40	@ 0x28
 8004984:	2100      	movs	r1, #0
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fbca 	bl	8005120 <RCCEx_PLL3_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	2100      	movs	r1, #0
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d011      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	3328      	adds	r3, #40	@ 0x28
 80049c4:	2101      	movs	r1, #1
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fbaa 	bl	8005120 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	2100      	movs	r1, #0
 80049ec:	6039      	str	r1, [r7, #0]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	3328      	adds	r3, #40	@ 0x28
 8004a04:	2102      	movs	r1, #2
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fb8a 	bl	8005120 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a22:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a36:	46bd      	mov	sp, r7
 8004a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3c:	58024400 	.word	0x58024400

08004a40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a44:	f7fe fd96 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b06      	ldr	r3, [pc, #24]	@ (8004a64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	091b      	lsrs	r3, r3, #4
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4904      	ldr	r1, [pc, #16]	@ (8004a68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	f003 031f 	and.w	r3, r3, #31
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	58024400 	.word	0x58024400
 8004a68:	08007260 	.word	0x08007260

08004a6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b089      	sub	sp, #36	@ 0x24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a74:	4ba1      	ldr	r3, [pc, #644]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a7e:	4b9f      	ldr	r3, [pc, #636]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a82:	0b1b      	lsrs	r3, r3, #12
 8004a84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a8a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a96:	4b99      	ldr	r3, [pc, #612]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8111 	beq.w	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	f000 8083 	beq.w	8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	f200 80a1 	bhi.w	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d056      	beq.n	8004b84 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ad6:	e099      	b.n	8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad8:	4b88      	ldr	r3, [pc, #544]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0320 	and.w	r3, r3, #32
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d02d      	beq.n	8004b40 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae4:	4b85      	ldr	r3, [pc, #532]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	4a84      	ldr	r2, [pc, #528]	@ (8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b3e:	e087      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b52:	4b6a      	ldr	r3, [pc, #424]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b82:	e065      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b96:	4b59      	ldr	r3, [pc, #356]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9e:	ee07 3a90 	vmov	s15, r3
 8004ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004baa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc6:	e043      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bda:	4b48      	ldr	r3, [pc, #288]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0a:	e021      	b.n	8004c50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	ee07 3a90 	vmov	s15, r3
 8004c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	4b37      	ldr	r3, [pc, #220]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c50:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	0a5b      	lsrs	r3, r3, #9
 8004c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c76:	ee17 2a90 	vmov	r2, s15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca4:	ee17 2a90 	vmov	r2, s15
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004cac:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	0e1b      	lsrs	r3, r3, #24
 8004cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd2:	ee17 2a90 	vmov	r2, s15
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cda:	e008      	b.n	8004cee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
}
 8004cee:	bf00      	nop
 8004cf0:	3724      	adds	r7, #36	@ 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	58024400 	.word	0x58024400
 8004d00:	03d09000 	.word	0x03d09000
 8004d04:	46000000 	.word	0x46000000
 8004d08:	4c742400 	.word	0x4c742400
 8004d0c:	4a742400 	.word	0x4a742400
 8004d10:	4bbebc20 	.word	0x4bbebc20

08004d14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	@ 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d1c:	4ba1      	ldr	r3, [pc, #644]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d26:	4b9f      	ldr	r3, [pc, #636]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d2a:	0d1b      	lsrs	r3, r3, #20
 8004d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d32:	4b9c      	ldr	r3, [pc, #624]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	0a1b      	lsrs	r3, r3, #8
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d3e:	4b99      	ldr	r3, [pc, #612]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d42:	08db      	lsrs	r3, r3, #3
 8004d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8111 	beq.w	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f000 8083 	beq.w	8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f200 80a1 	bhi.w	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d056      	beq.n	8004e2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d7e:	e099      	b.n	8004eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d80:	4b88      	ldr	r3, [pc, #544]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02d      	beq.n	8004de8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d8c:	4b85      	ldr	r3, [pc, #532]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	4a84      	ldr	r2, [pc, #528]	@ (8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004de6:	e087      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e2a:	e065      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b59      	ldr	r3, [pc, #356]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6e:	e043      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b48      	ldr	r3, [pc, #288]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eb2:	e021      	b.n	8004ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec6:	4b37      	ldr	r3, [pc, #220]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	0a5b      	lsrs	r3, r3, #9
 8004efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1e:	ee17 2a90 	vmov	r2, s15
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f26:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	0c1b      	lsrs	r3, r3, #16
 8004f2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f30:	ee07 3a90 	vmov	s15, r3
 8004f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4c:	ee17 2a90 	vmov	r2, s15
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f54:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	0e1b      	lsrs	r3, r3, #24
 8004f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7a:	ee17 2a90 	vmov	r2, s15
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f82:	e008      	b.n	8004f96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
}
 8004f96:	bf00      	nop
 8004f98:	3724      	adds	r7, #36	@ 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	03d09000 	.word	0x03d09000
 8004fac:	46000000 	.word	0x46000000
 8004fb0:	4c742400 	.word	0x4c742400
 8004fb4:	4a742400 	.word	0x4a742400
 8004fb8:	4bbebc20 	.word	0x4bbebc20

08004fbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fca:	4b53      	ldr	r3, [pc, #332]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d101      	bne.n	8004fda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e099      	b.n	800510e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fda:	4b4f      	ldr	r3, [pc, #316]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4e      	ldr	r2, [pc, #312]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8004fe0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fc fa97 	bl	8001518 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fec:	e008      	b.n	8005000 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fee:	f7fc fa93 	bl	8001518 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e086      	b.n	800510e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005000:	4b45      	ldr	r3, [pc, #276]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800500c:	4b42      	ldr	r3, [pc, #264]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	493f      	ldr	r1, [pc, #252]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	3b01      	subs	r3, #1
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	3b01      	subs	r3, #1
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	b29b      	uxth	r3, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	3b01      	subs	r3, #1
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005050:	4931      	ldr	r1, [pc, #196]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005056:	4b30      	ldr	r3, [pc, #192]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	492d      	ldr	r1, [pc, #180]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005068:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506c:	f023 0220 	bic.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4928      	ldr	r1, [pc, #160]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507e:	4a26      	ldr	r2, [pc, #152]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005080:	f023 0310 	bic.w	r3, r3, #16
 8005084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800508a:	4b24      	ldr	r3, [pc, #144]	@ (800511c <RCCEx_PLL2_Config+0x160>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	69d2      	ldr	r2, [r2, #28]
 8005092:	00d2      	lsls	r2, r2, #3
 8005094:	4920      	ldr	r1, [pc, #128]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800509a:	4b1f      	ldr	r3, [pc, #124]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	4a1e      	ldr	r2, [pc, #120]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b8:	e00f      	b.n	80050da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050c0:	4b15      	ldr	r3, [pc, #84]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	4a14      	ldr	r2, [pc, #80]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050cc:	e005      	b.n	80050da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ce:	4b12      	ldr	r3, [pc, #72]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4a11      	ldr	r2, [pc, #68]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050da:	4b0f      	ldr	r3, [pc, #60]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a0e      	ldr	r2, [pc, #56]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fc fa17 	bl	8001518 <HAL_GetTick>
 80050ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050ec:	e008      	b.n	8005100 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ee:	f7fc fa13 	bl	8001518 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <RCCEx_PLL2_Config+0x15c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	ffff0007 	.word	0xffff0007

08005120 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800512e:	4b53      	ldr	r3, [pc, #332]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b03      	cmp	r3, #3
 8005138:	d101      	bne.n	800513e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e099      	b.n	8005272 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800513e:	4b4f      	ldr	r3, [pc, #316]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4e      	ldr	r2, [pc, #312]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005144:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514a:	f7fc f9e5 	bl	8001518 <HAL_GetTick>
 800514e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005150:	e008      	b.n	8005164 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005152:	f7fc f9e1 	bl	8001518 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e086      	b.n	8005272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005164:	4b45      	ldr	r3, [pc, #276]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f0      	bne.n	8005152 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005170:	4b42      	ldr	r3, [pc, #264]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005174:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	493f      	ldr	r1, [pc, #252]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	628b      	str	r3, [r1, #40]	@ 0x28
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	3b01      	subs	r3, #1
 800518a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	3b01      	subs	r3, #1
 8005194:	025b      	lsls	r3, r3, #9
 8005196:	b29b      	uxth	r3, r3
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	3b01      	subs	r3, #1
 80051ae:	061b      	lsls	r3, r3, #24
 80051b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051b4:	4931      	ldr	r1, [pc, #196]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051ba:	4b30      	ldr	r3, [pc, #192]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	492d      	ldr	r1, [pc, #180]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051cc:	4b2b      	ldr	r3, [pc, #172]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	4928      	ldr	r1, [pc, #160]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051de:	4b27      	ldr	r3, [pc, #156]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4a26      	ldr	r2, [pc, #152]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ee:	4b24      	ldr	r3, [pc, #144]	@ (8005280 <RCCEx_PLL3_Config+0x160>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	69d2      	ldr	r2, [r2, #28]
 80051f6:	00d2      	lsls	r2, r2, #3
 80051f8:	4920      	ldr	r1, [pc, #128]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051fe:	4b1f      	ldr	r3, [pc, #124]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4a1e      	ldr	r2, [pc, #120]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005208:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d106      	bne.n	800521e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005210:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	4a19      	ldr	r2, [pc, #100]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005216:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800521a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800521c:	e00f      	b.n	800523e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d106      	bne.n	8005232 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005224:	4b15      	ldr	r3, [pc, #84]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	4a14      	ldr	r2, [pc, #80]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 800522a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800522e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005230:	e005      	b.n	800523e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005232:	4b12      	ldr	r3, [pc, #72]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	4a11      	ldr	r2, [pc, #68]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005238:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800523c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a0e      	ldr	r2, [pc, #56]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005248:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800524a:	f7fc f965 	bl	8001518 <HAL_GetTick>
 800524e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005250:	e008      	b.n	8005264 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005252:	f7fc f961 	bl	8001518 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <RCCEx_PLL3_Config+0x15c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	58024400 	.word	0x58024400
 8005280:	ffff0007 	.word	0xffff0007

08005284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e042      	b.n	800531c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f83b 	bl	8005324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2224      	movs	r2, #36	@ 0x24
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0201 	bic.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fe28 	bl	8005f24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f8bd 	bl	8005454 <UART_SetConfig>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d101      	bne.n	80052e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e01b      	b.n	800531c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005302:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fea7 	bl	8006068 <UART_CheckIdleState>
 800531a:	4603      	mov	r3, r0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	@ 0x28
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	603b      	str	r3, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800534e:	2b20      	cmp	r3, #32
 8005350:	d17b      	bne.n	800544a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_UART_Transmit+0x26>
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e074      	b.n	800544c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2221      	movs	r2, #33	@ 0x21
 800536e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005372:	f7fc f8d1 	bl	8001518 <HAL_GetTick>
 8005376:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	88fa      	ldrh	r2, [r7, #6]
 8005384:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005390:	d108      	bne.n	80053a4 <HAL_UART_Transmit+0x6c>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d104      	bne.n	80053a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	e003      	b.n	80053ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053ac:	e030      	b.n	8005410 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2180      	movs	r1, #128	@ 0x80
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 feff 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e03d      	b.n	800544c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10b      	bne.n	80053ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	3302      	adds	r3, #2
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e007      	b.n	80053fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	781a      	ldrb	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3301      	adds	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1c8      	bne.n	80053ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	2140      	movs	r1, #64	@ 0x40
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fec8 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e006      	b.n	800544c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	e000      	b.n	800544c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3720      	adds	r7, #32
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b092      	sub	sp, #72	@ 0x48
 800545a:	af00      	add	r7, sp, #0
 800545c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	431a      	orrs	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	431a      	orrs	r2, r3
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	4313      	orrs	r3, r2
 800547a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4bbe      	ldr	r3, [pc, #760]	@ (800577c <UART_SetConfig+0x328>)
 8005484:	4013      	ands	r3, r2
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800548c:	430b      	orrs	r3, r1
 800548e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4ab3      	ldr	r2, [pc, #716]	@ (8005780 <UART_SetConfig+0x32c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054bc:	4313      	orrs	r3, r2
 80054be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	4baf      	ldr	r3, [pc, #700]	@ (8005784 <UART_SetConfig+0x330>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054da:	f023 010f 	bic.w	r1, r3, #15
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4aa6      	ldr	r2, [pc, #664]	@ (8005788 <UART_SetConfig+0x334>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d177      	bne.n	80055e4 <UART_SetConfig+0x190>
 80054f4:	4ba5      	ldr	r3, [pc, #660]	@ (800578c <UART_SetConfig+0x338>)
 80054f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054fc:	2b28      	cmp	r3, #40	@ 0x28
 80054fe:	d86d      	bhi.n	80055dc <UART_SetConfig+0x188>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <UART_SetConfig+0xb4>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	080055ad 	.word	0x080055ad
 800550c:	080055dd 	.word	0x080055dd
 8005510:	080055dd 	.word	0x080055dd
 8005514:	080055dd 	.word	0x080055dd
 8005518:	080055dd 	.word	0x080055dd
 800551c:	080055dd 	.word	0x080055dd
 8005520:	080055dd 	.word	0x080055dd
 8005524:	080055dd 	.word	0x080055dd
 8005528:	080055b5 	.word	0x080055b5
 800552c:	080055dd 	.word	0x080055dd
 8005530:	080055dd 	.word	0x080055dd
 8005534:	080055dd 	.word	0x080055dd
 8005538:	080055dd 	.word	0x080055dd
 800553c:	080055dd 	.word	0x080055dd
 8005540:	080055dd 	.word	0x080055dd
 8005544:	080055dd 	.word	0x080055dd
 8005548:	080055bd 	.word	0x080055bd
 800554c:	080055dd 	.word	0x080055dd
 8005550:	080055dd 	.word	0x080055dd
 8005554:	080055dd 	.word	0x080055dd
 8005558:	080055dd 	.word	0x080055dd
 800555c:	080055dd 	.word	0x080055dd
 8005560:	080055dd 	.word	0x080055dd
 8005564:	080055dd 	.word	0x080055dd
 8005568:	080055c5 	.word	0x080055c5
 800556c:	080055dd 	.word	0x080055dd
 8005570:	080055dd 	.word	0x080055dd
 8005574:	080055dd 	.word	0x080055dd
 8005578:	080055dd 	.word	0x080055dd
 800557c:	080055dd 	.word	0x080055dd
 8005580:	080055dd 	.word	0x080055dd
 8005584:	080055dd 	.word	0x080055dd
 8005588:	080055cd 	.word	0x080055cd
 800558c:	080055dd 	.word	0x080055dd
 8005590:	080055dd 	.word	0x080055dd
 8005594:	080055dd 	.word	0x080055dd
 8005598:	080055dd 	.word	0x080055dd
 800559c:	080055dd 	.word	0x080055dd
 80055a0:	080055dd 	.word	0x080055dd
 80055a4:	080055dd 	.word	0x080055dd
 80055a8:	080055d5 	.word	0x080055d5
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e222      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ba:	e21e      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055c2:	e21a      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ca:	e216      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055cc:	2320      	movs	r3, #32
 80055ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055d2:	e212      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055d4:	2340      	movs	r3, #64	@ 0x40
 80055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055da:	e20e      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e20a      	b.n	80059fa <UART_SetConfig+0x5a6>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a69      	ldr	r2, [pc, #420]	@ (8005790 <UART_SetConfig+0x33c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d130      	bne.n	8005650 <UART_SetConfig+0x1fc>
 80055ee:	4b67      	ldr	r3, [pc, #412]	@ (800578c <UART_SetConfig+0x338>)
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d826      	bhi.n	8005648 <UART_SetConfig+0x1f4>
 80055fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <UART_SetConfig+0x1ac>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005619 	.word	0x08005619
 8005604:	08005621 	.word	0x08005621
 8005608:	08005629 	.word	0x08005629
 800560c:	08005631 	.word	0x08005631
 8005610:	08005639 	.word	0x08005639
 8005614:	08005641 	.word	0x08005641
 8005618:	2300      	movs	r3, #0
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e1ec      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e1e8      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e1e4      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e1e0      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005638:	2320      	movs	r3, #32
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e1dc      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005640:	2340      	movs	r3, #64	@ 0x40
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e1d8      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005648:	2380      	movs	r3, #128	@ 0x80
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e1d4      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a4f      	ldr	r2, [pc, #316]	@ (8005794 <UART_SetConfig+0x340>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d130      	bne.n	80056bc <UART_SetConfig+0x268>
 800565a:	4b4c      	ldr	r3, [pc, #304]	@ (800578c <UART_SetConfig+0x338>)
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	f003 0307 	and.w	r3, r3, #7
 8005662:	2b05      	cmp	r3, #5
 8005664:	d826      	bhi.n	80056b4 <UART_SetConfig+0x260>
 8005666:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <UART_SetConfig+0x218>)
 8005668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566c:	08005685 	.word	0x08005685
 8005670:	0800568d 	.word	0x0800568d
 8005674:	08005695 	.word	0x08005695
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056a5 	.word	0x080056a5
 8005680:	080056ad 	.word	0x080056ad
 8005684:	2300      	movs	r3, #0
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e1b6      	b.n	80059fa <UART_SetConfig+0x5a6>
 800568c:	2304      	movs	r3, #4
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e1b2      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005694:	2308      	movs	r3, #8
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e1ae      	b.n	80059fa <UART_SetConfig+0x5a6>
 800569c:	2310      	movs	r3, #16
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e1aa      	b.n	80059fa <UART_SetConfig+0x5a6>
 80056a4:	2320      	movs	r3, #32
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e1a6      	b.n	80059fa <UART_SetConfig+0x5a6>
 80056ac:	2340      	movs	r3, #64	@ 0x40
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e1a2      	b.n	80059fa <UART_SetConfig+0x5a6>
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e19e      	b.n	80059fa <UART_SetConfig+0x5a6>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a35      	ldr	r2, [pc, #212]	@ (8005798 <UART_SetConfig+0x344>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d130      	bne.n	8005728 <UART_SetConfig+0x2d4>
 80056c6:	4b31      	ldr	r3, [pc, #196]	@ (800578c <UART_SetConfig+0x338>)
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d826      	bhi.n	8005720 <UART_SetConfig+0x2cc>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <UART_SetConfig+0x284>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056f1 	.word	0x080056f1
 80056dc:	080056f9 	.word	0x080056f9
 80056e0:	08005701 	.word	0x08005701
 80056e4:	08005709 	.word	0x08005709
 80056e8:	08005711 	.word	0x08005711
 80056ec:	08005719 	.word	0x08005719
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e180      	b.n	80059fa <UART_SetConfig+0x5a6>
 80056f8:	2304      	movs	r3, #4
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e17c      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005700:	2308      	movs	r3, #8
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e178      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005708:	2310      	movs	r3, #16
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e174      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005710:	2320      	movs	r3, #32
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e170      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005718:	2340      	movs	r3, #64	@ 0x40
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e16c      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005720:	2380      	movs	r3, #128	@ 0x80
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e168      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <UART_SetConfig+0x348>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d142      	bne.n	80057b8 <UART_SetConfig+0x364>
 8005732:	4b16      	ldr	r3, [pc, #88]	@ (800578c <UART_SetConfig+0x338>)
 8005734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	2b05      	cmp	r3, #5
 800573c:	d838      	bhi.n	80057b0 <UART_SetConfig+0x35c>
 800573e:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <UART_SetConfig+0x2f0>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	0800575d 	.word	0x0800575d
 8005748:	08005765 	.word	0x08005765
 800574c:	0800576d 	.word	0x0800576d
 8005750:	08005775 	.word	0x08005775
 8005754:	080057a1 	.word	0x080057a1
 8005758:	080057a9 	.word	0x080057a9
 800575c:	2300      	movs	r3, #0
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e14a      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005764:	2304      	movs	r3, #4
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e146      	b.n	80059fa <UART_SetConfig+0x5a6>
 800576c:	2308      	movs	r3, #8
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e142      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005774:	2310      	movs	r3, #16
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e13e      	b.n	80059fa <UART_SetConfig+0x5a6>
 800577c:	cfff69f3 	.word	0xcfff69f3
 8005780:	58000c00 	.word	0x58000c00
 8005784:	11fff4ff 	.word	0x11fff4ff
 8005788:	40011000 	.word	0x40011000
 800578c:	58024400 	.word	0x58024400
 8005790:	40004400 	.word	0x40004400
 8005794:	40004800 	.word	0x40004800
 8005798:	40004c00 	.word	0x40004c00
 800579c:	40005000 	.word	0x40005000
 80057a0:	2320      	movs	r3, #32
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e128      	b.n	80059fa <UART_SetConfig+0x5a6>
 80057a8:	2340      	movs	r3, #64	@ 0x40
 80057aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ae:	e124      	b.n	80059fa <UART_SetConfig+0x5a6>
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057b6:	e120      	b.n	80059fa <UART_SetConfig+0x5a6>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4acb      	ldr	r2, [pc, #812]	@ (8005aec <UART_SetConfig+0x698>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d176      	bne.n	80058b0 <UART_SetConfig+0x45c>
 80057c2:	4bcb      	ldr	r3, [pc, #812]	@ (8005af0 <UART_SetConfig+0x69c>)
 80057c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ca:	2b28      	cmp	r3, #40	@ 0x28
 80057cc:	d86c      	bhi.n	80058a8 <UART_SetConfig+0x454>
 80057ce:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <UART_SetConfig+0x380>)
 80057d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d4:	08005879 	.word	0x08005879
 80057d8:	080058a9 	.word	0x080058a9
 80057dc:	080058a9 	.word	0x080058a9
 80057e0:	080058a9 	.word	0x080058a9
 80057e4:	080058a9 	.word	0x080058a9
 80057e8:	080058a9 	.word	0x080058a9
 80057ec:	080058a9 	.word	0x080058a9
 80057f0:	080058a9 	.word	0x080058a9
 80057f4:	08005881 	.word	0x08005881
 80057f8:	080058a9 	.word	0x080058a9
 80057fc:	080058a9 	.word	0x080058a9
 8005800:	080058a9 	.word	0x080058a9
 8005804:	080058a9 	.word	0x080058a9
 8005808:	080058a9 	.word	0x080058a9
 800580c:	080058a9 	.word	0x080058a9
 8005810:	080058a9 	.word	0x080058a9
 8005814:	08005889 	.word	0x08005889
 8005818:	080058a9 	.word	0x080058a9
 800581c:	080058a9 	.word	0x080058a9
 8005820:	080058a9 	.word	0x080058a9
 8005824:	080058a9 	.word	0x080058a9
 8005828:	080058a9 	.word	0x080058a9
 800582c:	080058a9 	.word	0x080058a9
 8005830:	080058a9 	.word	0x080058a9
 8005834:	08005891 	.word	0x08005891
 8005838:	080058a9 	.word	0x080058a9
 800583c:	080058a9 	.word	0x080058a9
 8005840:	080058a9 	.word	0x080058a9
 8005844:	080058a9 	.word	0x080058a9
 8005848:	080058a9 	.word	0x080058a9
 800584c:	080058a9 	.word	0x080058a9
 8005850:	080058a9 	.word	0x080058a9
 8005854:	08005899 	.word	0x08005899
 8005858:	080058a9 	.word	0x080058a9
 800585c:	080058a9 	.word	0x080058a9
 8005860:	080058a9 	.word	0x080058a9
 8005864:	080058a9 	.word	0x080058a9
 8005868:	080058a9 	.word	0x080058a9
 800586c:	080058a9 	.word	0x080058a9
 8005870:	080058a9 	.word	0x080058a9
 8005874:	080058a1 	.word	0x080058a1
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e0bc      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005880:	2304      	movs	r3, #4
 8005882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005886:	e0b8      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005888:	2308      	movs	r3, #8
 800588a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588e:	e0b4      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005890:	2310      	movs	r3, #16
 8005892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005896:	e0b0      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005898:	2320      	movs	r3, #32
 800589a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589e:	e0ac      	b.n	80059fa <UART_SetConfig+0x5a6>
 80058a0:	2340      	movs	r3, #64	@ 0x40
 80058a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a6:	e0a8      	b.n	80059fa <UART_SetConfig+0x5a6>
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ae:	e0a4      	b.n	80059fa <UART_SetConfig+0x5a6>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a8f      	ldr	r2, [pc, #572]	@ (8005af4 <UART_SetConfig+0x6a0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d130      	bne.n	800591c <UART_SetConfig+0x4c8>
 80058ba:	4b8d      	ldr	r3, [pc, #564]	@ (8005af0 <UART_SetConfig+0x69c>)
 80058bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058be:	f003 0307 	and.w	r3, r3, #7
 80058c2:	2b05      	cmp	r3, #5
 80058c4:	d826      	bhi.n	8005914 <UART_SetConfig+0x4c0>
 80058c6:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <UART_SetConfig+0x478>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	080058f5 	.word	0x080058f5
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005905 	.word	0x08005905
 80058e0:	0800590d 	.word	0x0800590d
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ea:	e086      	b.n	80059fa <UART_SetConfig+0x5a6>
 80058ec:	2304      	movs	r3, #4
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f2:	e082      	b.n	80059fa <UART_SetConfig+0x5a6>
 80058f4:	2308      	movs	r3, #8
 80058f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fa:	e07e      	b.n	80059fa <UART_SetConfig+0x5a6>
 80058fc:	2310      	movs	r3, #16
 80058fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005902:	e07a      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005904:	2320      	movs	r3, #32
 8005906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590a:	e076      	b.n	80059fa <UART_SetConfig+0x5a6>
 800590c:	2340      	movs	r3, #64	@ 0x40
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005912:	e072      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e06e      	b.n	80059fa <UART_SetConfig+0x5a6>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a75      	ldr	r2, [pc, #468]	@ (8005af8 <UART_SetConfig+0x6a4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d130      	bne.n	8005988 <UART_SetConfig+0x534>
 8005926:	4b72      	ldr	r3, [pc, #456]	@ (8005af0 <UART_SetConfig+0x69c>)
 8005928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	2b05      	cmp	r3, #5
 8005930:	d826      	bhi.n	8005980 <UART_SetConfig+0x52c>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <UART_SetConfig+0x4e4>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	08005951 	.word	0x08005951
 800593c:	08005959 	.word	0x08005959
 8005940:	08005961 	.word	0x08005961
 8005944:	08005969 	.word	0x08005969
 8005948:	08005971 	.word	0x08005971
 800594c:	08005979 	.word	0x08005979
 8005950:	2300      	movs	r3, #0
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e050      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005958:	2304      	movs	r3, #4
 800595a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595e:	e04c      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005960:	2308      	movs	r3, #8
 8005962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005966:	e048      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005968:	2310      	movs	r3, #16
 800596a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596e:	e044      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005970:	2320      	movs	r3, #32
 8005972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005976:	e040      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005978:	2340      	movs	r3, #64	@ 0x40
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e03c      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005980:	2380      	movs	r3, #128	@ 0x80
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e038      	b.n	80059fa <UART_SetConfig+0x5a6>
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a5b      	ldr	r2, [pc, #364]	@ (8005afc <UART_SetConfig+0x6a8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d130      	bne.n	80059f4 <UART_SetConfig+0x5a0>
 8005992:	4b57      	ldr	r3, [pc, #348]	@ (8005af0 <UART_SetConfig+0x69c>)
 8005994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	2b05      	cmp	r3, #5
 800599c:	d826      	bhi.n	80059ec <UART_SetConfig+0x598>
 800599e:	a201      	add	r2, pc, #4	@ (adr r2, 80059a4 <UART_SetConfig+0x550>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	080059bd 	.word	0x080059bd
 80059a8:	080059c5 	.word	0x080059c5
 80059ac:	080059cd 	.word	0x080059cd
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059dd 	.word	0x080059dd
 80059b8:	080059e5 	.word	0x080059e5
 80059bc:	2302      	movs	r3, #2
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e01a      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059c4:	2304      	movs	r3, #4
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ca:	e016      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059cc:	2308      	movs	r3, #8
 80059ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d2:	e012      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059d4:	2310      	movs	r3, #16
 80059d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059da:	e00e      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059dc:	2320      	movs	r3, #32
 80059de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e2:	e00a      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059e4:	2340      	movs	r3, #64	@ 0x40
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e006      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059ec:	2380      	movs	r3, #128	@ 0x80
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e002      	b.n	80059fa <UART_SetConfig+0x5a6>
 80059f4:	2380      	movs	r3, #128	@ 0x80
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a3f      	ldr	r2, [pc, #252]	@ (8005afc <UART_SetConfig+0x6a8>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	f040 80f8 	bne.w	8005bf6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	dc46      	bgt.n	8005a9c <UART_SetConfig+0x648>
 8005a0e:	2b02      	cmp	r3, #2
 8005a10:	f2c0 8082 	blt.w	8005b18 <UART_SetConfig+0x6c4>
 8005a14:	3b02      	subs	r3, #2
 8005a16:	2b1e      	cmp	r3, #30
 8005a18:	d87e      	bhi.n	8005b18 <UART_SetConfig+0x6c4>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <UART_SetConfig+0x5cc>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005aa3 	.word	0x08005aa3
 8005a24:	08005b19 	.word	0x08005b19
 8005a28:	08005aab 	.word	0x08005aab
 8005a2c:	08005b19 	.word	0x08005b19
 8005a30:	08005b19 	.word	0x08005b19
 8005a34:	08005b19 	.word	0x08005b19
 8005a38:	08005abb 	.word	0x08005abb
 8005a3c:	08005b19 	.word	0x08005b19
 8005a40:	08005b19 	.word	0x08005b19
 8005a44:	08005b19 	.word	0x08005b19
 8005a48:	08005b19 	.word	0x08005b19
 8005a4c:	08005b19 	.word	0x08005b19
 8005a50:	08005b19 	.word	0x08005b19
 8005a54:	08005b19 	.word	0x08005b19
 8005a58:	08005acb 	.word	0x08005acb
 8005a5c:	08005b19 	.word	0x08005b19
 8005a60:	08005b19 	.word	0x08005b19
 8005a64:	08005b19 	.word	0x08005b19
 8005a68:	08005b19 	.word	0x08005b19
 8005a6c:	08005b19 	.word	0x08005b19
 8005a70:	08005b19 	.word	0x08005b19
 8005a74:	08005b19 	.word	0x08005b19
 8005a78:	08005b19 	.word	0x08005b19
 8005a7c:	08005b19 	.word	0x08005b19
 8005a80:	08005b19 	.word	0x08005b19
 8005a84:	08005b19 	.word	0x08005b19
 8005a88:	08005b19 	.word	0x08005b19
 8005a8c:	08005b19 	.word	0x08005b19
 8005a90:	08005b19 	.word	0x08005b19
 8005a94:	08005b19 	.word	0x08005b19
 8005a98:	08005b0b 	.word	0x08005b0b
 8005a9c:	2b40      	cmp	r3, #64	@ 0x40
 8005a9e:	d037      	beq.n	8005b10 <UART_SetConfig+0x6bc>
 8005aa0:	e03a      	b.n	8005b18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005aa2:	f7fe ffcd 	bl	8004a40 <HAL_RCCEx_GetD3PCLK1Freq>
 8005aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005aa8:	e03c      	b.n	8005b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe ffdc 	bl	8004a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab8:	e034      	b.n	8005b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aba:	f107 0318 	add.w	r3, r7, #24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff f928 	bl	8004d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac8:	e02c      	b.n	8005b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005aca:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <UART_SetConfig+0x69c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d016      	beq.n	8005b04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ad6:	4b06      	ldr	r3, [pc, #24]	@ (8005af0 <UART_SetConfig+0x69c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	08db      	lsrs	r3, r3, #3
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	4a07      	ldr	r2, [pc, #28]	@ (8005b00 <UART_SetConfig+0x6ac>)
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ae8:	e01c      	b.n	8005b24 <UART_SetConfig+0x6d0>
 8005aea:	bf00      	nop
 8005aec:	40011400 	.word	0x40011400
 8005af0:	58024400 	.word	0x58024400
 8005af4:	40007800 	.word	0x40007800
 8005af8:	40007c00 	.word	0x40007c00
 8005afc:	58000c00 	.word	0x58000c00
 8005b00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b04:	4b9d      	ldr	r3, [pc, #628]	@ (8005d7c <UART_SetConfig+0x928>)
 8005b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b08:	e00c      	b.n	8005b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b0a:	4b9d      	ldr	r3, [pc, #628]	@ (8005d80 <UART_SetConfig+0x92c>)
 8005b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b0e:	e009      	b.n	8005b24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b16:	e005      	b.n	8005b24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 81de 	beq.w	8005ee8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	4a94      	ldr	r2, [pc, #592]	@ (8005d84 <UART_SetConfig+0x930>)
 8005b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b36:	461a      	mov	r2, r3
 8005b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d305      	bcc.n	8005b5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d903      	bls.n	8005b64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b62:	e1c1      	b.n	8005ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b66:	2200      	movs	r2, #0
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	60fa      	str	r2, [r7, #12]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b70:	4a84      	ldr	r2, [pc, #528]	@ (8005d84 <UART_SetConfig+0x930>)
 8005b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	2200      	movs	r2, #0
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	607a      	str	r2, [r7, #4]
 8005b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b86:	f7fa fbfb 	bl	8000380 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4610      	mov	r0, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	020b      	lsls	r3, r1, #8
 8005b9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ba0:	0202      	lsls	r2, r0, #8
 8005ba2:	6979      	ldr	r1, [r7, #20]
 8005ba4:	6849      	ldr	r1, [r1, #4]
 8005ba6:	0849      	lsrs	r1, r1, #1
 8005ba8:	2000      	movs	r0, #0
 8005baa:	460c      	mov	r4, r1
 8005bac:	4605      	mov	r5, r0
 8005bae:	eb12 0804 	adds.w	r8, r2, r4
 8005bb2:	eb43 0905 	adc.w	r9, r3, r5
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	469a      	mov	sl, r3
 8005bbe:	4693      	mov	fp, r2
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	465b      	mov	r3, fp
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	f7fa fbda 	bl	8000380 <__aeabi_uldivmod>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bda:	d308      	bcc.n	8005bee <UART_SetConfig+0x79a>
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be2:	d204      	bcs.n	8005bee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bea:	60da      	str	r2, [r3, #12]
 8005bec:	e17c      	b.n	8005ee8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005bf4:	e178      	b.n	8005ee8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfe:	f040 80c5 	bne.w	8005d8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	dc48      	bgt.n	8005c9c <UART_SetConfig+0x848>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	db7b      	blt.n	8005d06 <UART_SetConfig+0x8b2>
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d879      	bhi.n	8005d06 <UART_SetConfig+0x8b2>
 8005c12:	a201      	add	r2, pc, #4	@ (adr r2, 8005c18 <UART_SetConfig+0x7c4>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005ca3 	.word	0x08005ca3
 8005c1c:	08005cab 	.word	0x08005cab
 8005c20:	08005d07 	.word	0x08005d07
 8005c24:	08005d07 	.word	0x08005d07
 8005c28:	08005cb3 	.word	0x08005cb3
 8005c2c:	08005d07 	.word	0x08005d07
 8005c30:	08005d07 	.word	0x08005d07
 8005c34:	08005d07 	.word	0x08005d07
 8005c38:	08005cc3 	.word	0x08005cc3
 8005c3c:	08005d07 	.word	0x08005d07
 8005c40:	08005d07 	.word	0x08005d07
 8005c44:	08005d07 	.word	0x08005d07
 8005c48:	08005d07 	.word	0x08005d07
 8005c4c:	08005d07 	.word	0x08005d07
 8005c50:	08005d07 	.word	0x08005d07
 8005c54:	08005d07 	.word	0x08005d07
 8005c58:	08005cd3 	.word	0x08005cd3
 8005c5c:	08005d07 	.word	0x08005d07
 8005c60:	08005d07 	.word	0x08005d07
 8005c64:	08005d07 	.word	0x08005d07
 8005c68:	08005d07 	.word	0x08005d07
 8005c6c:	08005d07 	.word	0x08005d07
 8005c70:	08005d07 	.word	0x08005d07
 8005c74:	08005d07 	.word	0x08005d07
 8005c78:	08005d07 	.word	0x08005d07
 8005c7c:	08005d07 	.word	0x08005d07
 8005c80:	08005d07 	.word	0x08005d07
 8005c84:	08005d07 	.word	0x08005d07
 8005c88:	08005d07 	.word	0x08005d07
 8005c8c:	08005d07 	.word	0x08005d07
 8005c90:	08005d07 	.word	0x08005d07
 8005c94:	08005d07 	.word	0x08005d07
 8005c98:	08005cf9 	.word	0x08005cf9
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d02e      	beq.n	8005cfe <UART_SetConfig+0x8aa>
 8005ca0:	e031      	b.n	8005d06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca2:	f7fd fc97 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8005ca6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ca8:	e033      	b.n	8005d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005caa:	f7fd fca9 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8005cae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cb0:	e02f      	b.n	8005d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fed8 	bl	8004a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc0:	e027      	b.n	8005d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc2:	f107 0318 	add.w	r3, r7, #24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff f824 	bl	8004d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd0:	e01f      	b.n	8005d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d88 <UART_SetConfig+0x934>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d009      	beq.n	8005cf2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cde:	4b2a      	ldr	r3, [pc, #168]	@ (8005d88 <UART_SetConfig+0x934>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	08db      	lsrs	r3, r3, #3
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	4a24      	ldr	r2, [pc, #144]	@ (8005d7c <UART_SetConfig+0x928>)
 8005cea:	fa22 f303 	lsr.w	r3, r2, r3
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cf0:	e00f      	b.n	8005d12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cf2:	4b22      	ldr	r3, [pc, #136]	@ (8005d7c <UART_SetConfig+0x928>)
 8005cf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf6:	e00c      	b.n	8005d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cf8:	4b21      	ldr	r3, [pc, #132]	@ (8005d80 <UART_SetConfig+0x92c>)
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e009      	b.n	8005d12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d04:	e005      	b.n	8005d12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80e7 	beq.w	8005ee8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	4a19      	ldr	r2, [pc, #100]	@ (8005d84 <UART_SetConfig+0x930>)
 8005d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d2c:	005a      	lsls	r2, r3, #1
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	441a      	add	r2, r3
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	2b0f      	cmp	r3, #15
 8005d44:	d916      	bls.n	8005d74 <UART_SetConfig+0x920>
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d4c:	d212      	bcs.n	8005d74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f023 030f 	bic.w	r3, r3, #15
 8005d56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d66:	4313      	orrs	r3, r2
 8005d68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	e0b9      	b.n	8005ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d7a:	e0b5      	b.n	8005ee8 <UART_SetConfig+0xa94>
 8005d7c:	03d09000 	.word	0x03d09000
 8005d80:	003d0900 	.word	0x003d0900
 8005d84:	0800728c 	.word	0x0800728c
 8005d88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	dc49      	bgt.n	8005e28 <UART_SetConfig+0x9d4>
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	db7c      	blt.n	8005e92 <UART_SetConfig+0xa3e>
 8005d98:	2b20      	cmp	r3, #32
 8005d9a:	d87a      	bhi.n	8005e92 <UART_SetConfig+0xa3e>
 8005d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005da4 <UART_SetConfig+0x950>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005e2f 	.word	0x08005e2f
 8005da8:	08005e37 	.word	0x08005e37
 8005dac:	08005e93 	.word	0x08005e93
 8005db0:	08005e93 	.word	0x08005e93
 8005db4:	08005e3f 	.word	0x08005e3f
 8005db8:	08005e93 	.word	0x08005e93
 8005dbc:	08005e93 	.word	0x08005e93
 8005dc0:	08005e93 	.word	0x08005e93
 8005dc4:	08005e4f 	.word	0x08005e4f
 8005dc8:	08005e93 	.word	0x08005e93
 8005dcc:	08005e93 	.word	0x08005e93
 8005dd0:	08005e93 	.word	0x08005e93
 8005dd4:	08005e93 	.word	0x08005e93
 8005dd8:	08005e93 	.word	0x08005e93
 8005ddc:	08005e93 	.word	0x08005e93
 8005de0:	08005e93 	.word	0x08005e93
 8005de4:	08005e5f 	.word	0x08005e5f
 8005de8:	08005e93 	.word	0x08005e93
 8005dec:	08005e93 	.word	0x08005e93
 8005df0:	08005e93 	.word	0x08005e93
 8005df4:	08005e93 	.word	0x08005e93
 8005df8:	08005e93 	.word	0x08005e93
 8005dfc:	08005e93 	.word	0x08005e93
 8005e00:	08005e93 	.word	0x08005e93
 8005e04:	08005e93 	.word	0x08005e93
 8005e08:	08005e93 	.word	0x08005e93
 8005e0c:	08005e93 	.word	0x08005e93
 8005e10:	08005e93 	.word	0x08005e93
 8005e14:	08005e93 	.word	0x08005e93
 8005e18:	08005e93 	.word	0x08005e93
 8005e1c:	08005e93 	.word	0x08005e93
 8005e20:	08005e93 	.word	0x08005e93
 8005e24:	08005e85 	.word	0x08005e85
 8005e28:	2b40      	cmp	r3, #64	@ 0x40
 8005e2a:	d02e      	beq.n	8005e8a <UART_SetConfig+0xa36>
 8005e2c:	e031      	b.n	8005e92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e2e:	f7fd fbd1 	bl	80035d4 <HAL_RCC_GetPCLK1Freq>
 8005e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e34:	e033      	b.n	8005e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e36:	f7fd fbe3 	bl	8003600 <HAL_RCC_GetPCLK2Freq>
 8005e3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e3c:	e02f      	b.n	8005e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fe fe12 	bl	8004a6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e4c:	e027      	b.n	8005e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e4e:	f107 0318 	add.w	r3, r7, #24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe ff5e 	bl	8004d14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5c:	e01f      	b.n	8005e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f14 <UART_SetConfig+0xac0>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d009      	beq.n	8005e7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f14 <UART_SetConfig+0xac0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	08db      	lsrs	r3, r3, #3
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	4a28      	ldr	r2, [pc, #160]	@ (8005f18 <UART_SetConfig+0xac4>)
 8005e76:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e7c:	e00f      	b.n	8005e9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005e7e:	4b26      	ldr	r3, [pc, #152]	@ (8005f18 <UART_SetConfig+0xac4>)
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e82:	e00c      	b.n	8005e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e84:	4b25      	ldr	r3, [pc, #148]	@ (8005f1c <UART_SetConfig+0xac8>)
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e88:	e009      	b.n	8005e9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e90:	e005      	b.n	8005e9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005e92:	2300      	movs	r3, #0
 8005e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8005e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d021      	beq.n	8005ee8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f20 <UART_SetConfig+0xacc>)
 8005eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	085b      	lsrs	r3, r3, #1
 8005ebc:	441a      	add	r2, r3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	d909      	bls.n	8005ee2 <UART_SetConfig+0xa8e>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed4:	d205      	bcs.n	8005ee2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60da      	str	r2, [r3, #12]
 8005ee0:	e002      	b.n	8005ee8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2200      	movs	r2, #0
 8005efc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2200      	movs	r2, #0
 8005f02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f04:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3748      	adds	r7, #72	@ 0x48
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f12:	bf00      	nop
 8005f14:	58024400 	.word	0x58024400
 8005f18:	03d09000 	.word	0x03d09000
 8005f1c:	003d0900 	.word	0x003d0900
 8005f20:	0800728c 	.word	0x0800728c

08005f24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01a      	beq.n	800603a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006022:	d10a      	bne.n	800603a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00a      	beq.n	800605c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	605a      	str	r2, [r3, #4]
  }
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b098      	sub	sp, #96	@ 0x60
 800606c:	af02      	add	r7, sp, #8
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006078:	f7fb fa4e 	bl	8001518 <HAL_GetTick>
 800607c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b08      	cmp	r3, #8
 800608a:	d12f      	bne.n	80060ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800608c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006094:	2200      	movs	r2, #0
 8006096:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f88e 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d022      	beq.n	80060ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	e853 3f00 	ldrex	r3, [r3]
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060cc:	e841 2300 	strex	r3, r2, [r1]
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1e6      	bne.n	80060a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e063      	b.n	80061b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0304 	and.w	r3, r3, #4
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	d149      	bne.n	800618e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006102:	2200      	movs	r2, #0
 8006104:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f857 	bl	80061bc <UART_WaitOnFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d03c      	beq.n	800618e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611c:	e853 3f00 	ldrex	r3, [r3]
 8006120:	623b      	str	r3, [r7, #32]
   return(result);
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006128:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006132:	633b      	str	r3, [r7, #48]	@ 0x30
 8006134:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613a:	e841 2300 	strex	r3, r2, [r1]
 800613e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1e6      	bne.n	8006114 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3308      	adds	r3, #8
 800614c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	60fb      	str	r3, [r7, #12]
   return(result);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0301 	bic.w	r3, r3, #1
 800615c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3308      	adds	r3, #8
 8006164:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006166:	61fa      	str	r2, [r7, #28]
 8006168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	69b9      	ldr	r1, [r7, #24]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	617b      	str	r3, [r7, #20]
   return(result);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e012      	b.n	80061b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3758      	adds	r7, #88	@ 0x58
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061cc:	e04f      	b.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d4:	d04b      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d6:	f7fb f99f 	bl	8001518 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d302      	bcc.n	80061ec <UART_WaitOnFlagUntilTimeout+0x30>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e04e      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d037      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b80      	cmp	r3, #128	@ 0x80
 8006202:	d034      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b40      	cmp	r3, #64	@ 0x40
 8006208:	d031      	beq.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f003 0308 	and.w	r3, r3, #8
 8006214:	2b08      	cmp	r3, #8
 8006216:	d110      	bne.n	800623a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2208      	movs	r2, #8
 800621e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f839 	bl	8006298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2208      	movs	r2, #8
 800622a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e029      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006248:	d111      	bne.n	800626e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006252:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f81f 	bl	8006298 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2220      	movs	r2, #32
 800625e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e00f      	b.n	800628e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	429a      	cmp	r2, r3
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	79fb      	ldrb	r3, [r7, #7]
 8006288:	429a      	cmp	r2, r3
 800628a:	d0a0      	beq.n	80061ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006298:	b480      	push	{r7}
 800629a:	b095      	sub	sp, #84	@ 0x54
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a8:	e853 3f00 	ldrex	r3, [r3]
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062be:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e6      	bne.n	80062a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3308      	adds	r3, #8
 80062d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	e853 3f00 	ldrex	r3, [r3]
 80062e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <UART_EndRxTransfer+0xc8>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3308      	adds	r3, #8
 80062f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062fa:	e841 2300 	strex	r3, r2, [r1]
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1e5      	bne.n	80062d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d118      	bne.n	8006340 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	e853 3f00 	ldrex	r3, [r3]
 800631a:	60bb      	str	r3, [r7, #8]
   return(result);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0310 	bic.w	r3, r3, #16
 8006322:	647b      	str	r3, [r7, #68]	@ 0x44
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	461a      	mov	r2, r3
 800632a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006330:	6979      	ldr	r1, [r7, #20]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	e841 2300 	strex	r3, r2, [r1]
 8006338:	613b      	str	r3, [r7, #16]
   return(result);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e6      	bne.n	800630e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006354:	bf00      	nop
 8006356:	3754      	adds	r7, #84	@ 0x54
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	effffffe 	.word	0xeffffffe

08006364 <std>:
 8006364:	2300      	movs	r3, #0
 8006366:	b510      	push	{r4, lr}
 8006368:	4604      	mov	r4, r0
 800636a:	e9c0 3300 	strd	r3, r3, [r0]
 800636e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006372:	6083      	str	r3, [r0, #8]
 8006374:	8181      	strh	r1, [r0, #12]
 8006376:	6643      	str	r3, [r0, #100]	@ 0x64
 8006378:	81c2      	strh	r2, [r0, #14]
 800637a:	6183      	str	r3, [r0, #24]
 800637c:	4619      	mov	r1, r3
 800637e:	2208      	movs	r2, #8
 8006380:	305c      	adds	r0, #92	@ 0x5c
 8006382:	f000 f906 	bl	8006592 <memset>
 8006386:	4b0d      	ldr	r3, [pc, #52]	@ (80063bc <std+0x58>)
 8006388:	6263      	str	r3, [r4, #36]	@ 0x24
 800638a:	4b0d      	ldr	r3, [pc, #52]	@ (80063c0 <std+0x5c>)
 800638c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800638e:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <std+0x60>)
 8006390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006392:	4b0d      	ldr	r3, [pc, #52]	@ (80063c8 <std+0x64>)
 8006394:	6323      	str	r3, [r4, #48]	@ 0x30
 8006396:	4b0d      	ldr	r3, [pc, #52]	@ (80063cc <std+0x68>)
 8006398:	6224      	str	r4, [r4, #32]
 800639a:	429c      	cmp	r4, r3
 800639c:	d006      	beq.n	80063ac <std+0x48>
 800639e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063a2:	4294      	cmp	r4, r2
 80063a4:	d002      	beq.n	80063ac <std+0x48>
 80063a6:	33d0      	adds	r3, #208	@ 0xd0
 80063a8:	429c      	cmp	r4, r3
 80063aa:	d105      	bne.n	80063b8 <std+0x54>
 80063ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b4:	f000 b966 	b.w	8006684 <__retarget_lock_init_recursive>
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	bf00      	nop
 80063bc:	0800650d 	.word	0x0800650d
 80063c0:	0800652f 	.word	0x0800652f
 80063c4:	08006567 	.word	0x08006567
 80063c8:	0800658b 	.word	0x0800658b
 80063cc:	2400022c 	.word	0x2400022c

080063d0 <stdio_exit_handler>:
 80063d0:	4a02      	ldr	r2, [pc, #8]	@ (80063dc <stdio_exit_handler+0xc>)
 80063d2:	4903      	ldr	r1, [pc, #12]	@ (80063e0 <stdio_exit_handler+0x10>)
 80063d4:	4803      	ldr	r0, [pc, #12]	@ (80063e4 <stdio_exit_handler+0x14>)
 80063d6:	f000 b869 	b.w	80064ac <_fwalk_sglue>
 80063da:	bf00      	nop
 80063dc:	2400002c 	.word	0x2400002c
 80063e0:	08006f41 	.word	0x08006f41
 80063e4:	2400003c 	.word	0x2400003c

080063e8 <cleanup_stdio>:
 80063e8:	6841      	ldr	r1, [r0, #4]
 80063ea:	4b0c      	ldr	r3, [pc, #48]	@ (800641c <cleanup_stdio+0x34>)
 80063ec:	4299      	cmp	r1, r3
 80063ee:	b510      	push	{r4, lr}
 80063f0:	4604      	mov	r4, r0
 80063f2:	d001      	beq.n	80063f8 <cleanup_stdio+0x10>
 80063f4:	f000 fda4 	bl	8006f40 <_fflush_r>
 80063f8:	68a1      	ldr	r1, [r4, #8]
 80063fa:	4b09      	ldr	r3, [pc, #36]	@ (8006420 <cleanup_stdio+0x38>)
 80063fc:	4299      	cmp	r1, r3
 80063fe:	d002      	beq.n	8006406 <cleanup_stdio+0x1e>
 8006400:	4620      	mov	r0, r4
 8006402:	f000 fd9d 	bl	8006f40 <_fflush_r>
 8006406:	68e1      	ldr	r1, [r4, #12]
 8006408:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <cleanup_stdio+0x3c>)
 800640a:	4299      	cmp	r1, r3
 800640c:	d004      	beq.n	8006418 <cleanup_stdio+0x30>
 800640e:	4620      	mov	r0, r4
 8006410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006414:	f000 bd94 	b.w	8006f40 <_fflush_r>
 8006418:	bd10      	pop	{r4, pc}
 800641a:	bf00      	nop
 800641c:	2400022c 	.word	0x2400022c
 8006420:	24000294 	.word	0x24000294
 8006424:	240002fc 	.word	0x240002fc

08006428 <global_stdio_init.part.0>:
 8006428:	b510      	push	{r4, lr}
 800642a:	4b0b      	ldr	r3, [pc, #44]	@ (8006458 <global_stdio_init.part.0+0x30>)
 800642c:	4c0b      	ldr	r4, [pc, #44]	@ (800645c <global_stdio_init.part.0+0x34>)
 800642e:	4a0c      	ldr	r2, [pc, #48]	@ (8006460 <global_stdio_init.part.0+0x38>)
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	4620      	mov	r0, r4
 8006434:	2200      	movs	r2, #0
 8006436:	2104      	movs	r1, #4
 8006438:	f7ff ff94 	bl	8006364 <std>
 800643c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006440:	2201      	movs	r2, #1
 8006442:	2109      	movs	r1, #9
 8006444:	f7ff ff8e 	bl	8006364 <std>
 8006448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800644c:	2202      	movs	r2, #2
 800644e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006452:	2112      	movs	r1, #18
 8006454:	f7ff bf86 	b.w	8006364 <std>
 8006458:	24000364 	.word	0x24000364
 800645c:	2400022c 	.word	0x2400022c
 8006460:	080063d1 	.word	0x080063d1

08006464 <__sfp_lock_acquire>:
 8006464:	4801      	ldr	r0, [pc, #4]	@ (800646c <__sfp_lock_acquire+0x8>)
 8006466:	f000 b90e 	b.w	8006686 <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	2400036d 	.word	0x2400036d

08006470 <__sfp_lock_release>:
 8006470:	4801      	ldr	r0, [pc, #4]	@ (8006478 <__sfp_lock_release+0x8>)
 8006472:	f000 b909 	b.w	8006688 <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	2400036d 	.word	0x2400036d

0800647c <__sinit>:
 800647c:	b510      	push	{r4, lr}
 800647e:	4604      	mov	r4, r0
 8006480:	f7ff fff0 	bl	8006464 <__sfp_lock_acquire>
 8006484:	6a23      	ldr	r3, [r4, #32]
 8006486:	b11b      	cbz	r3, 8006490 <__sinit+0x14>
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	f7ff bff0 	b.w	8006470 <__sfp_lock_release>
 8006490:	4b04      	ldr	r3, [pc, #16]	@ (80064a4 <__sinit+0x28>)
 8006492:	6223      	str	r3, [r4, #32]
 8006494:	4b04      	ldr	r3, [pc, #16]	@ (80064a8 <__sinit+0x2c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1f5      	bne.n	8006488 <__sinit+0xc>
 800649c:	f7ff ffc4 	bl	8006428 <global_stdio_init.part.0>
 80064a0:	e7f2      	b.n	8006488 <__sinit+0xc>
 80064a2:	bf00      	nop
 80064a4:	080063e9 	.word	0x080063e9
 80064a8:	24000364 	.word	0x24000364

080064ac <_fwalk_sglue>:
 80064ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b0:	4607      	mov	r7, r0
 80064b2:	4688      	mov	r8, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	2600      	movs	r6, #0
 80064b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064bc:	f1b9 0901 	subs.w	r9, r9, #1
 80064c0:	d505      	bpl.n	80064ce <_fwalk_sglue+0x22>
 80064c2:	6824      	ldr	r4, [r4, #0]
 80064c4:	2c00      	cmp	r4, #0
 80064c6:	d1f7      	bne.n	80064b8 <_fwalk_sglue+0xc>
 80064c8:	4630      	mov	r0, r6
 80064ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d907      	bls.n	80064e4 <_fwalk_sglue+0x38>
 80064d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064d8:	3301      	adds	r3, #1
 80064da:	d003      	beq.n	80064e4 <_fwalk_sglue+0x38>
 80064dc:	4629      	mov	r1, r5
 80064de:	4638      	mov	r0, r7
 80064e0:	47c0      	blx	r8
 80064e2:	4306      	orrs	r6, r0
 80064e4:	3568      	adds	r5, #104	@ 0x68
 80064e6:	e7e9      	b.n	80064bc <_fwalk_sglue+0x10>

080064e8 <iprintf>:
 80064e8:	b40f      	push	{r0, r1, r2, r3}
 80064ea:	b507      	push	{r0, r1, r2, lr}
 80064ec:	4906      	ldr	r1, [pc, #24]	@ (8006508 <iprintf+0x20>)
 80064ee:	ab04      	add	r3, sp, #16
 80064f0:	6808      	ldr	r0, [r1, #0]
 80064f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f6:	6881      	ldr	r1, [r0, #8]
 80064f8:	9301      	str	r3, [sp, #4]
 80064fa:	f000 f9f7 	bl	80068ec <_vfiprintf_r>
 80064fe:	b003      	add	sp, #12
 8006500:	f85d eb04 	ldr.w	lr, [sp], #4
 8006504:	b004      	add	sp, #16
 8006506:	4770      	bx	lr
 8006508:	24000038 	.word	0x24000038

0800650c <__sread>:
 800650c:	b510      	push	{r4, lr}
 800650e:	460c      	mov	r4, r1
 8006510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006514:	f000 f868 	bl	80065e8 <_read_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	bfab      	itete	ge
 800651c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800651e:	89a3      	ldrhlt	r3, [r4, #12]
 8006520:	181b      	addge	r3, r3, r0
 8006522:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006526:	bfac      	ite	ge
 8006528:	6563      	strge	r3, [r4, #84]	@ 0x54
 800652a:	81a3      	strhlt	r3, [r4, #12]
 800652c:	bd10      	pop	{r4, pc}

0800652e <__swrite>:
 800652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006532:	461f      	mov	r7, r3
 8006534:	898b      	ldrh	r3, [r1, #12]
 8006536:	05db      	lsls	r3, r3, #23
 8006538:	4605      	mov	r5, r0
 800653a:	460c      	mov	r4, r1
 800653c:	4616      	mov	r6, r2
 800653e:	d505      	bpl.n	800654c <__swrite+0x1e>
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	2302      	movs	r3, #2
 8006546:	2200      	movs	r2, #0
 8006548:	f000 f83c 	bl	80065c4 <_lseek_r>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006552:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	4632      	mov	r2, r6
 800655a:	463b      	mov	r3, r7
 800655c:	4628      	mov	r0, r5
 800655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	f000 b853 	b.w	800660c <_write_r>

08006566 <__sseek>:
 8006566:	b510      	push	{r4, lr}
 8006568:	460c      	mov	r4, r1
 800656a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656e:	f000 f829 	bl	80065c4 <_lseek_r>
 8006572:	1c43      	adds	r3, r0, #1
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	bf15      	itete	ne
 8006578:	6560      	strne	r0, [r4, #84]	@ 0x54
 800657a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800657e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006582:	81a3      	strheq	r3, [r4, #12]
 8006584:	bf18      	it	ne
 8006586:	81a3      	strhne	r3, [r4, #12]
 8006588:	bd10      	pop	{r4, pc}

0800658a <__sclose>:
 800658a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658e:	f000 b809 	b.w	80065a4 <_close_r>

08006592 <memset>:
 8006592:	4402      	add	r2, r0
 8006594:	4603      	mov	r3, r0
 8006596:	4293      	cmp	r3, r2
 8006598:	d100      	bne.n	800659c <memset+0xa>
 800659a:	4770      	bx	lr
 800659c:	f803 1b01 	strb.w	r1, [r3], #1
 80065a0:	e7f9      	b.n	8006596 <memset+0x4>
	...

080065a4 <_close_r>:
 80065a4:	b538      	push	{r3, r4, r5, lr}
 80065a6:	4d06      	ldr	r5, [pc, #24]	@ (80065c0 <_close_r+0x1c>)
 80065a8:	2300      	movs	r3, #0
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	602b      	str	r3, [r5, #0]
 80065b0:	f7fa fc6b 	bl	8000e8a <_close>
 80065b4:	1c43      	adds	r3, r0, #1
 80065b6:	d102      	bne.n	80065be <_close_r+0x1a>
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	b103      	cbz	r3, 80065be <_close_r+0x1a>
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	bd38      	pop	{r3, r4, r5, pc}
 80065c0:	24000368 	.word	0x24000368

080065c4 <_lseek_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4d07      	ldr	r5, [pc, #28]	@ (80065e4 <_lseek_r+0x20>)
 80065c8:	4604      	mov	r4, r0
 80065ca:	4608      	mov	r0, r1
 80065cc:	4611      	mov	r1, r2
 80065ce:	2200      	movs	r2, #0
 80065d0:	602a      	str	r2, [r5, #0]
 80065d2:	461a      	mov	r2, r3
 80065d4:	f7fa fc80 	bl	8000ed8 <_lseek>
 80065d8:	1c43      	adds	r3, r0, #1
 80065da:	d102      	bne.n	80065e2 <_lseek_r+0x1e>
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b103      	cbz	r3, 80065e2 <_lseek_r+0x1e>
 80065e0:	6023      	str	r3, [r4, #0]
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	24000368 	.word	0x24000368

080065e8 <_read_r>:
 80065e8:	b538      	push	{r3, r4, r5, lr}
 80065ea:	4d07      	ldr	r5, [pc, #28]	@ (8006608 <_read_r+0x20>)
 80065ec:	4604      	mov	r4, r0
 80065ee:	4608      	mov	r0, r1
 80065f0:	4611      	mov	r1, r2
 80065f2:	2200      	movs	r2, #0
 80065f4:	602a      	str	r2, [r5, #0]
 80065f6:	461a      	mov	r2, r3
 80065f8:	f7fa fc0e 	bl	8000e18 <_read>
 80065fc:	1c43      	adds	r3, r0, #1
 80065fe:	d102      	bne.n	8006606 <_read_r+0x1e>
 8006600:	682b      	ldr	r3, [r5, #0]
 8006602:	b103      	cbz	r3, 8006606 <_read_r+0x1e>
 8006604:	6023      	str	r3, [r4, #0]
 8006606:	bd38      	pop	{r3, r4, r5, pc}
 8006608:	24000368 	.word	0x24000368

0800660c <_write_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	@ (800662c <_write_r+0x20>)
 8006610:	4604      	mov	r4, r0
 8006612:	4608      	mov	r0, r1
 8006614:	4611      	mov	r1, r2
 8006616:	2200      	movs	r2, #0
 8006618:	602a      	str	r2, [r5, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	f7fa fc19 	bl	8000e52 <_write>
 8006620:	1c43      	adds	r3, r0, #1
 8006622:	d102      	bne.n	800662a <_write_r+0x1e>
 8006624:	682b      	ldr	r3, [r5, #0]
 8006626:	b103      	cbz	r3, 800662a <_write_r+0x1e>
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	bd38      	pop	{r3, r4, r5, pc}
 800662c:	24000368 	.word	0x24000368

08006630 <__errno>:
 8006630:	4b01      	ldr	r3, [pc, #4]	@ (8006638 <__errno+0x8>)
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	24000038 	.word	0x24000038

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	@ (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	@ (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	@ (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	@ (8006680 <__libc_init_array+0x44>)
 8006650:	f000 fdc6 	bl	80071e0 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	080072e0 	.word	0x080072e0
 8006678:	080072e0 	.word	0x080072e0
 800667c:	080072e0 	.word	0x080072e0
 8006680:	080072e4 	.word	0x080072e4

08006684 <__retarget_lock_init_recursive>:
 8006684:	4770      	bx	lr

08006686 <__retarget_lock_acquire_recursive>:
 8006686:	4770      	bx	lr

08006688 <__retarget_lock_release_recursive>:
 8006688:	4770      	bx	lr

0800668a <memcpy>:
 800668a:	440a      	add	r2, r1
 800668c:	4291      	cmp	r1, r2
 800668e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006692:	d100      	bne.n	8006696 <memcpy+0xc>
 8006694:	4770      	bx	lr
 8006696:	b510      	push	{r4, lr}
 8006698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d1f9      	bne.n	8006698 <memcpy+0xe>
 80066a4:	bd10      	pop	{r4, pc}
	...

080066a8 <_free_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4605      	mov	r5, r0
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d041      	beq.n	8006734 <_free_r+0x8c>
 80066b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b4:	1f0c      	subs	r4, r1, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bfb8      	it	lt
 80066ba:	18e4      	addlt	r4, r4, r3
 80066bc:	f000 f8e0 	bl	8006880 <__malloc_lock>
 80066c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <_free_r+0x90>)
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	b933      	cbnz	r3, 80066d4 <_free_r+0x2c>
 80066c6:	6063      	str	r3, [r4, #4]
 80066c8:	6014      	str	r4, [r2, #0]
 80066ca:	4628      	mov	r0, r5
 80066cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d0:	f000 b8dc 	b.w	800688c <__malloc_unlock>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d908      	bls.n	80066ea <_free_r+0x42>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	1821      	adds	r1, r4, r0
 80066dc:	428b      	cmp	r3, r1
 80066de:	bf01      	itttt	eq
 80066e0:	6819      	ldreq	r1, [r3, #0]
 80066e2:	685b      	ldreq	r3, [r3, #4]
 80066e4:	1809      	addeq	r1, r1, r0
 80066e6:	6021      	streq	r1, [r4, #0]
 80066e8:	e7ed      	b.n	80066c6 <_free_r+0x1e>
 80066ea:	461a      	mov	r2, r3
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b10b      	cbz	r3, 80066f4 <_free_r+0x4c>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d9fa      	bls.n	80066ea <_free_r+0x42>
 80066f4:	6811      	ldr	r1, [r2, #0]
 80066f6:	1850      	adds	r0, r2, r1
 80066f8:	42a0      	cmp	r0, r4
 80066fa:	d10b      	bne.n	8006714 <_free_r+0x6c>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	4401      	add	r1, r0
 8006700:	1850      	adds	r0, r2, r1
 8006702:	4283      	cmp	r3, r0
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	d1e0      	bne.n	80066ca <_free_r+0x22>
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	6053      	str	r3, [r2, #4]
 800670e:	4408      	add	r0, r1
 8006710:	6010      	str	r0, [r2, #0]
 8006712:	e7da      	b.n	80066ca <_free_r+0x22>
 8006714:	d902      	bls.n	800671c <_free_r+0x74>
 8006716:	230c      	movs	r3, #12
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	e7d6      	b.n	80066ca <_free_r+0x22>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	1821      	adds	r1, r4, r0
 8006720:	428b      	cmp	r3, r1
 8006722:	bf04      	itt	eq
 8006724:	6819      	ldreq	r1, [r3, #0]
 8006726:	685b      	ldreq	r3, [r3, #4]
 8006728:	6063      	str	r3, [r4, #4]
 800672a:	bf04      	itt	eq
 800672c:	1809      	addeq	r1, r1, r0
 800672e:	6021      	streq	r1, [r4, #0]
 8006730:	6054      	str	r4, [r2, #4]
 8006732:	e7ca      	b.n	80066ca <_free_r+0x22>
 8006734:	bd38      	pop	{r3, r4, r5, pc}
 8006736:	bf00      	nop
 8006738:	24000374 	.word	0x24000374

0800673c <sbrk_aligned>:
 800673c:	b570      	push	{r4, r5, r6, lr}
 800673e:	4e0f      	ldr	r6, [pc, #60]	@ (800677c <sbrk_aligned+0x40>)
 8006740:	460c      	mov	r4, r1
 8006742:	6831      	ldr	r1, [r6, #0]
 8006744:	4605      	mov	r5, r0
 8006746:	b911      	cbnz	r1, 800674e <sbrk_aligned+0x12>
 8006748:	f000 fcb6 	bl	80070b8 <_sbrk_r>
 800674c:	6030      	str	r0, [r6, #0]
 800674e:	4621      	mov	r1, r4
 8006750:	4628      	mov	r0, r5
 8006752:	f000 fcb1 	bl	80070b8 <_sbrk_r>
 8006756:	1c43      	adds	r3, r0, #1
 8006758:	d103      	bne.n	8006762 <sbrk_aligned+0x26>
 800675a:	f04f 34ff 	mov.w	r4, #4294967295
 800675e:	4620      	mov	r0, r4
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0f8      	beq.n	800675e <sbrk_aligned+0x22>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4628      	mov	r0, r5
 8006770:	f000 fca2 	bl	80070b8 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1f2      	bne.n	800675e <sbrk_aligned+0x22>
 8006778:	e7ef      	b.n	800675a <sbrk_aligned+0x1e>
 800677a:	bf00      	nop
 800677c:	24000370 	.word	0x24000370

08006780 <_malloc_r>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	1ccd      	adds	r5, r1, #3
 8006786:	f025 0503 	bic.w	r5, r5, #3
 800678a:	3508      	adds	r5, #8
 800678c:	2d0c      	cmp	r5, #12
 800678e:	bf38      	it	cc
 8006790:	250c      	movcc	r5, #12
 8006792:	2d00      	cmp	r5, #0
 8006794:	4606      	mov	r6, r0
 8006796:	db01      	blt.n	800679c <_malloc_r+0x1c>
 8006798:	42a9      	cmp	r1, r5
 800679a:	d904      	bls.n	80067a6 <_malloc_r+0x26>
 800679c:	230c      	movs	r3, #12
 800679e:	6033      	str	r3, [r6, #0]
 80067a0:	2000      	movs	r0, #0
 80067a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800687c <_malloc_r+0xfc>
 80067aa:	f000 f869 	bl	8006880 <__malloc_lock>
 80067ae:	f8d8 3000 	ldr.w	r3, [r8]
 80067b2:	461c      	mov	r4, r3
 80067b4:	bb44      	cbnz	r4, 8006808 <_malloc_r+0x88>
 80067b6:	4629      	mov	r1, r5
 80067b8:	4630      	mov	r0, r6
 80067ba:	f7ff ffbf 	bl	800673c <sbrk_aligned>
 80067be:	1c43      	adds	r3, r0, #1
 80067c0:	4604      	mov	r4, r0
 80067c2:	d158      	bne.n	8006876 <_malloc_r+0xf6>
 80067c4:	f8d8 4000 	ldr.w	r4, [r8]
 80067c8:	4627      	mov	r7, r4
 80067ca:	2f00      	cmp	r7, #0
 80067cc:	d143      	bne.n	8006856 <_malloc_r+0xd6>
 80067ce:	2c00      	cmp	r4, #0
 80067d0:	d04b      	beq.n	800686a <_malloc_r+0xea>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	4639      	mov	r1, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	eb04 0903 	add.w	r9, r4, r3
 80067dc:	f000 fc6c 	bl	80070b8 <_sbrk_r>
 80067e0:	4581      	cmp	r9, r0
 80067e2:	d142      	bne.n	800686a <_malloc_r+0xea>
 80067e4:	6821      	ldr	r1, [r4, #0]
 80067e6:	1a6d      	subs	r5, r5, r1
 80067e8:	4629      	mov	r1, r5
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7ff ffa6 	bl	800673c <sbrk_aligned>
 80067f0:	3001      	adds	r0, #1
 80067f2:	d03a      	beq.n	800686a <_malloc_r+0xea>
 80067f4:	6823      	ldr	r3, [r4, #0]
 80067f6:	442b      	add	r3, r5
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	f8d8 3000 	ldr.w	r3, [r8]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	bb62      	cbnz	r2, 800685c <_malloc_r+0xdc>
 8006802:	f8c8 7000 	str.w	r7, [r8]
 8006806:	e00f      	b.n	8006828 <_malloc_r+0xa8>
 8006808:	6822      	ldr	r2, [r4, #0]
 800680a:	1b52      	subs	r2, r2, r5
 800680c:	d420      	bmi.n	8006850 <_malloc_r+0xd0>
 800680e:	2a0b      	cmp	r2, #11
 8006810:	d917      	bls.n	8006842 <_malloc_r+0xc2>
 8006812:	1961      	adds	r1, r4, r5
 8006814:	42a3      	cmp	r3, r4
 8006816:	6025      	str	r5, [r4, #0]
 8006818:	bf18      	it	ne
 800681a:	6059      	strne	r1, [r3, #4]
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	bf08      	it	eq
 8006820:	f8c8 1000 	streq.w	r1, [r8]
 8006824:	5162      	str	r2, [r4, r5]
 8006826:	604b      	str	r3, [r1, #4]
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f82f 	bl	800688c <__malloc_unlock>
 800682e:	f104 000b 	add.w	r0, r4, #11
 8006832:	1d23      	adds	r3, r4, #4
 8006834:	f020 0007 	bic.w	r0, r0, #7
 8006838:	1ac2      	subs	r2, r0, r3
 800683a:	bf1c      	itt	ne
 800683c:	1a1b      	subne	r3, r3, r0
 800683e:	50a3      	strne	r3, [r4, r2]
 8006840:	e7af      	b.n	80067a2 <_malloc_r+0x22>
 8006842:	6862      	ldr	r2, [r4, #4]
 8006844:	42a3      	cmp	r3, r4
 8006846:	bf0c      	ite	eq
 8006848:	f8c8 2000 	streq.w	r2, [r8]
 800684c:	605a      	strne	r2, [r3, #4]
 800684e:	e7eb      	b.n	8006828 <_malloc_r+0xa8>
 8006850:	4623      	mov	r3, r4
 8006852:	6864      	ldr	r4, [r4, #4]
 8006854:	e7ae      	b.n	80067b4 <_malloc_r+0x34>
 8006856:	463c      	mov	r4, r7
 8006858:	687f      	ldr	r7, [r7, #4]
 800685a:	e7b6      	b.n	80067ca <_malloc_r+0x4a>
 800685c:	461a      	mov	r2, r3
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	42a3      	cmp	r3, r4
 8006862:	d1fb      	bne.n	800685c <_malloc_r+0xdc>
 8006864:	2300      	movs	r3, #0
 8006866:	6053      	str	r3, [r2, #4]
 8006868:	e7de      	b.n	8006828 <_malloc_r+0xa8>
 800686a:	230c      	movs	r3, #12
 800686c:	6033      	str	r3, [r6, #0]
 800686e:	4630      	mov	r0, r6
 8006870:	f000 f80c 	bl	800688c <__malloc_unlock>
 8006874:	e794      	b.n	80067a0 <_malloc_r+0x20>
 8006876:	6005      	str	r5, [r0, #0]
 8006878:	e7d6      	b.n	8006828 <_malloc_r+0xa8>
 800687a:	bf00      	nop
 800687c:	24000374 	.word	0x24000374

08006880 <__malloc_lock>:
 8006880:	4801      	ldr	r0, [pc, #4]	@ (8006888 <__malloc_lock+0x8>)
 8006882:	f7ff bf00 	b.w	8006686 <__retarget_lock_acquire_recursive>
 8006886:	bf00      	nop
 8006888:	2400036c 	.word	0x2400036c

0800688c <__malloc_unlock>:
 800688c:	4801      	ldr	r0, [pc, #4]	@ (8006894 <__malloc_unlock+0x8>)
 800688e:	f7ff befb 	b.w	8006688 <__retarget_lock_release_recursive>
 8006892:	bf00      	nop
 8006894:	2400036c 	.word	0x2400036c

08006898 <__sfputc_r>:
 8006898:	6893      	ldr	r3, [r2, #8]
 800689a:	3b01      	subs	r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	b410      	push	{r4}
 80068a0:	6093      	str	r3, [r2, #8]
 80068a2:	da08      	bge.n	80068b6 <__sfputc_r+0x1e>
 80068a4:	6994      	ldr	r4, [r2, #24]
 80068a6:	42a3      	cmp	r3, r4
 80068a8:	db01      	blt.n	80068ae <__sfputc_r+0x16>
 80068aa:	290a      	cmp	r1, #10
 80068ac:	d103      	bne.n	80068b6 <__sfputc_r+0x1e>
 80068ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068b2:	f000 bb6d 	b.w	8006f90 <__swbuf_r>
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	1c58      	adds	r0, r3, #1
 80068ba:	6010      	str	r0, [r2, #0]
 80068bc:	7019      	strb	r1, [r3, #0]
 80068be:	4608      	mov	r0, r1
 80068c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <__sfputs_r>:
 80068c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c8:	4606      	mov	r6, r0
 80068ca:	460f      	mov	r7, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	18d5      	adds	r5, r2, r3
 80068d0:	42ac      	cmp	r4, r5
 80068d2:	d101      	bne.n	80068d8 <__sfputs_r+0x12>
 80068d4:	2000      	movs	r0, #0
 80068d6:	e007      	b.n	80068e8 <__sfputs_r+0x22>
 80068d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068dc:	463a      	mov	r2, r7
 80068de:	4630      	mov	r0, r6
 80068e0:	f7ff ffda 	bl	8006898 <__sfputc_r>
 80068e4:	1c43      	adds	r3, r0, #1
 80068e6:	d1f3      	bne.n	80068d0 <__sfputs_r+0xa>
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068ec <_vfiprintf_r>:
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	460d      	mov	r5, r1
 80068f2:	b09d      	sub	sp, #116	@ 0x74
 80068f4:	4614      	mov	r4, r2
 80068f6:	4698      	mov	r8, r3
 80068f8:	4606      	mov	r6, r0
 80068fa:	b118      	cbz	r0, 8006904 <_vfiprintf_r+0x18>
 80068fc:	6a03      	ldr	r3, [r0, #32]
 80068fe:	b90b      	cbnz	r3, 8006904 <_vfiprintf_r+0x18>
 8006900:	f7ff fdbc 	bl	800647c <__sinit>
 8006904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	d405      	bmi.n	8006916 <_vfiprintf_r+0x2a>
 800690a:	89ab      	ldrh	r3, [r5, #12]
 800690c:	059a      	lsls	r2, r3, #22
 800690e:	d402      	bmi.n	8006916 <_vfiprintf_r+0x2a>
 8006910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006912:	f7ff feb8 	bl	8006686 <__retarget_lock_acquire_recursive>
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	071b      	lsls	r3, r3, #28
 800691a:	d501      	bpl.n	8006920 <_vfiprintf_r+0x34>
 800691c:	692b      	ldr	r3, [r5, #16]
 800691e:	b99b      	cbnz	r3, 8006948 <_vfiprintf_r+0x5c>
 8006920:	4629      	mov	r1, r5
 8006922:	4630      	mov	r0, r6
 8006924:	f000 fb72 	bl	800700c <__swsetup_r>
 8006928:	b170      	cbz	r0, 8006948 <_vfiprintf_r+0x5c>
 800692a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800692c:	07dc      	lsls	r4, r3, #31
 800692e:	d504      	bpl.n	800693a <_vfiprintf_r+0x4e>
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	b01d      	add	sp, #116	@ 0x74
 8006936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693a:	89ab      	ldrh	r3, [r5, #12]
 800693c:	0598      	lsls	r0, r3, #22
 800693e:	d4f7      	bmi.n	8006930 <_vfiprintf_r+0x44>
 8006940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006942:	f7ff fea1 	bl	8006688 <__retarget_lock_release_recursive>
 8006946:	e7f3      	b.n	8006930 <_vfiprintf_r+0x44>
 8006948:	2300      	movs	r3, #0
 800694a:	9309      	str	r3, [sp, #36]	@ 0x24
 800694c:	2320      	movs	r3, #32
 800694e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006952:	f8cd 800c 	str.w	r8, [sp, #12]
 8006956:	2330      	movs	r3, #48	@ 0x30
 8006958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006b08 <_vfiprintf_r+0x21c>
 800695c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006960:	f04f 0901 	mov.w	r9, #1
 8006964:	4623      	mov	r3, r4
 8006966:	469a      	mov	sl, r3
 8006968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800696c:	b10a      	cbz	r2, 8006972 <_vfiprintf_r+0x86>
 800696e:	2a25      	cmp	r2, #37	@ 0x25
 8006970:	d1f9      	bne.n	8006966 <_vfiprintf_r+0x7a>
 8006972:	ebba 0b04 	subs.w	fp, sl, r4
 8006976:	d00b      	beq.n	8006990 <_vfiprintf_r+0xa4>
 8006978:	465b      	mov	r3, fp
 800697a:	4622      	mov	r2, r4
 800697c:	4629      	mov	r1, r5
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff ffa1 	bl	80068c6 <__sfputs_r>
 8006984:	3001      	adds	r0, #1
 8006986:	f000 80a7 	beq.w	8006ad8 <_vfiprintf_r+0x1ec>
 800698a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800698c:	445a      	add	r2, fp
 800698e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006990:	f89a 3000 	ldrb.w	r3, [sl]
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 809f 	beq.w	8006ad8 <_vfiprintf_r+0x1ec>
 800699a:	2300      	movs	r3, #0
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069a4:	f10a 0a01 	add.w	sl, sl, #1
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	9307      	str	r3, [sp, #28]
 80069ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80069b2:	4654      	mov	r4, sl
 80069b4:	2205      	movs	r2, #5
 80069b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ba:	4853      	ldr	r0, [pc, #332]	@ (8006b08 <_vfiprintf_r+0x21c>)
 80069bc:	f7f9 fc90 	bl	80002e0 <memchr>
 80069c0:	9a04      	ldr	r2, [sp, #16]
 80069c2:	b9d8      	cbnz	r0, 80069fc <_vfiprintf_r+0x110>
 80069c4:	06d1      	lsls	r1, r2, #27
 80069c6:	bf44      	itt	mi
 80069c8:	2320      	movmi	r3, #32
 80069ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069ce:	0713      	lsls	r3, r2, #28
 80069d0:	bf44      	itt	mi
 80069d2:	232b      	movmi	r3, #43	@ 0x2b
 80069d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80069d8:	f89a 3000 	ldrb.w	r3, [sl]
 80069dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80069de:	d015      	beq.n	8006a0c <_vfiprintf_r+0x120>
 80069e0:	9a07      	ldr	r2, [sp, #28]
 80069e2:	4654      	mov	r4, sl
 80069e4:	2000      	movs	r0, #0
 80069e6:	f04f 0c0a 	mov.w	ip, #10
 80069ea:	4621      	mov	r1, r4
 80069ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069f0:	3b30      	subs	r3, #48	@ 0x30
 80069f2:	2b09      	cmp	r3, #9
 80069f4:	d94b      	bls.n	8006a8e <_vfiprintf_r+0x1a2>
 80069f6:	b1b0      	cbz	r0, 8006a26 <_vfiprintf_r+0x13a>
 80069f8:	9207      	str	r2, [sp, #28]
 80069fa:	e014      	b.n	8006a26 <_vfiprintf_r+0x13a>
 80069fc:	eba0 0308 	sub.w	r3, r0, r8
 8006a00:	fa09 f303 	lsl.w	r3, r9, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	9304      	str	r3, [sp, #16]
 8006a08:	46a2      	mov	sl, r4
 8006a0a:	e7d2      	b.n	80069b2 <_vfiprintf_r+0xc6>
 8006a0c:	9b03      	ldr	r3, [sp, #12]
 8006a0e:	1d19      	adds	r1, r3, #4
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	9103      	str	r1, [sp, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfbb      	ittet	lt
 8006a18:	425b      	neglt	r3, r3
 8006a1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a1e:	9307      	strge	r3, [sp, #28]
 8006a20:	9307      	strlt	r3, [sp, #28]
 8006a22:	bfb8      	it	lt
 8006a24:	9204      	strlt	r2, [sp, #16]
 8006a26:	7823      	ldrb	r3, [r4, #0]
 8006a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a2a:	d10a      	bne.n	8006a42 <_vfiprintf_r+0x156>
 8006a2c:	7863      	ldrb	r3, [r4, #1]
 8006a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a30:	d132      	bne.n	8006a98 <_vfiprintf_r+0x1ac>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	1d1a      	adds	r2, r3, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	9203      	str	r2, [sp, #12]
 8006a3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a3e:	3402      	adds	r4, #2
 8006a40:	9305      	str	r3, [sp, #20]
 8006a42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006b18 <_vfiprintf_r+0x22c>
 8006a46:	7821      	ldrb	r1, [r4, #0]
 8006a48:	2203      	movs	r2, #3
 8006a4a:	4650      	mov	r0, sl
 8006a4c:	f7f9 fc48 	bl	80002e0 <memchr>
 8006a50:	b138      	cbz	r0, 8006a62 <_vfiprintf_r+0x176>
 8006a52:	9b04      	ldr	r3, [sp, #16]
 8006a54:	eba0 000a 	sub.w	r0, r0, sl
 8006a58:	2240      	movs	r2, #64	@ 0x40
 8006a5a:	4082      	lsls	r2, r0
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	3401      	adds	r4, #1
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a66:	4829      	ldr	r0, [pc, #164]	@ (8006b0c <_vfiprintf_r+0x220>)
 8006a68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a6c:	2206      	movs	r2, #6
 8006a6e:	f7f9 fc37 	bl	80002e0 <memchr>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d03f      	beq.n	8006af6 <_vfiprintf_r+0x20a>
 8006a76:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <_vfiprintf_r+0x224>)
 8006a78:	bb1b      	cbnz	r3, 8006ac2 <_vfiprintf_r+0x1d6>
 8006a7a:	9b03      	ldr	r3, [sp, #12]
 8006a7c:	3307      	adds	r3, #7
 8006a7e:	f023 0307 	bic.w	r3, r3, #7
 8006a82:	3308      	adds	r3, #8
 8006a84:	9303      	str	r3, [sp, #12]
 8006a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a88:	443b      	add	r3, r7
 8006a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a8c:	e76a      	b.n	8006964 <_vfiprintf_r+0x78>
 8006a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a92:	460c      	mov	r4, r1
 8006a94:	2001      	movs	r0, #1
 8006a96:	e7a8      	b.n	80069ea <_vfiprintf_r+0xfe>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	3401      	adds	r4, #1
 8006a9c:	9305      	str	r3, [sp, #20]
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	f04f 0c0a 	mov.w	ip, #10
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006aaa:	3a30      	subs	r2, #48	@ 0x30
 8006aac:	2a09      	cmp	r2, #9
 8006aae:	d903      	bls.n	8006ab8 <_vfiprintf_r+0x1cc>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0c6      	beq.n	8006a42 <_vfiprintf_r+0x156>
 8006ab4:	9105      	str	r1, [sp, #20]
 8006ab6:	e7c4      	b.n	8006a42 <_vfiprintf_r+0x156>
 8006ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006abc:	4604      	mov	r4, r0
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e7f0      	b.n	8006aa4 <_vfiprintf_r+0x1b8>
 8006ac2:	ab03      	add	r3, sp, #12
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	462a      	mov	r2, r5
 8006ac8:	4b12      	ldr	r3, [pc, #72]	@ (8006b14 <_vfiprintf_r+0x228>)
 8006aca:	a904      	add	r1, sp, #16
 8006acc:	4630      	mov	r0, r6
 8006ace:	f3af 8000 	nop.w
 8006ad2:	4607      	mov	r7, r0
 8006ad4:	1c78      	adds	r0, r7, #1
 8006ad6:	d1d6      	bne.n	8006a86 <_vfiprintf_r+0x19a>
 8006ad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ada:	07d9      	lsls	r1, r3, #31
 8006adc:	d405      	bmi.n	8006aea <_vfiprintf_r+0x1fe>
 8006ade:	89ab      	ldrh	r3, [r5, #12]
 8006ae0:	059a      	lsls	r2, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <_vfiprintf_r+0x1fe>
 8006ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ae6:	f7ff fdcf 	bl	8006688 <__retarget_lock_release_recursive>
 8006aea:	89ab      	ldrh	r3, [r5, #12]
 8006aec:	065b      	lsls	r3, r3, #25
 8006aee:	f53f af1f 	bmi.w	8006930 <_vfiprintf_r+0x44>
 8006af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006af4:	e71e      	b.n	8006934 <_vfiprintf_r+0x48>
 8006af6:	ab03      	add	r3, sp, #12
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	462a      	mov	r2, r5
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <_vfiprintf_r+0x228>)
 8006afe:	a904      	add	r1, sp, #16
 8006b00:	4630      	mov	r0, r6
 8006b02:	f000 f879 	bl	8006bf8 <_printf_i>
 8006b06:	e7e4      	b.n	8006ad2 <_vfiprintf_r+0x1e6>
 8006b08:	080072a4 	.word	0x080072a4
 8006b0c:	080072ae 	.word	0x080072ae
 8006b10:	00000000 	.word	0x00000000
 8006b14:	080068c7 	.word	0x080068c7
 8006b18:	080072aa 	.word	0x080072aa

08006b1c <_printf_common>:
 8006b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	4616      	mov	r6, r2
 8006b22:	4698      	mov	r8, r3
 8006b24:	688a      	ldr	r2, [r1, #8]
 8006b26:	690b      	ldr	r3, [r1, #16]
 8006b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	bfb8      	it	lt
 8006b30:	4613      	movlt	r3, r2
 8006b32:	6033      	str	r3, [r6, #0]
 8006b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b38:	4607      	mov	r7, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	b10a      	cbz	r2, 8006b42 <_printf_common+0x26>
 8006b3e:	3301      	adds	r3, #1
 8006b40:	6033      	str	r3, [r6, #0]
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	0699      	lsls	r1, r3, #26
 8006b46:	bf42      	ittt	mi
 8006b48:	6833      	ldrmi	r3, [r6, #0]
 8006b4a:	3302      	addmi	r3, #2
 8006b4c:	6033      	strmi	r3, [r6, #0]
 8006b4e:	6825      	ldr	r5, [r4, #0]
 8006b50:	f015 0506 	ands.w	r5, r5, #6
 8006b54:	d106      	bne.n	8006b64 <_printf_common+0x48>
 8006b56:	f104 0a19 	add.w	sl, r4, #25
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	1a9b      	subs	r3, r3, r2
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dc26      	bgt.n	8006bb2 <_printf_common+0x96>
 8006b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	3b00      	subs	r3, #0
 8006b6c:	bf18      	it	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	0692      	lsls	r2, r2, #26
 8006b72:	d42b      	bmi.n	8006bcc <_printf_common+0xb0>
 8006b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b78:	4641      	mov	r1, r8
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	47c8      	blx	r9
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d01e      	beq.n	8006bc0 <_printf_common+0xa4>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	6922      	ldr	r2, [r4, #16]
 8006b86:	f003 0306 	and.w	r3, r3, #6
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	bf02      	ittt	eq
 8006b8e:	68e5      	ldreq	r5, [r4, #12]
 8006b90:	6833      	ldreq	r3, [r6, #0]
 8006b92:	1aed      	subeq	r5, r5, r3
 8006b94:	68a3      	ldr	r3, [r4, #8]
 8006b96:	bf0c      	ite	eq
 8006b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b9c:	2500      	movne	r5, #0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfc4      	itt	gt
 8006ba2:	1a9b      	subgt	r3, r3, r2
 8006ba4:	18ed      	addgt	r5, r5, r3
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	341a      	adds	r4, #26
 8006baa:	42b5      	cmp	r5, r6
 8006bac:	d11a      	bne.n	8006be4 <_printf_common+0xc8>
 8006bae:	2000      	movs	r0, #0
 8006bb0:	e008      	b.n	8006bc4 <_printf_common+0xa8>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	4652      	mov	r2, sl
 8006bb6:	4641      	mov	r1, r8
 8006bb8:	4638      	mov	r0, r7
 8006bba:	47c8      	blx	r9
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d103      	bne.n	8006bc8 <_printf_common+0xac>
 8006bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	3501      	adds	r5, #1
 8006bca:	e7c6      	b.n	8006b5a <_printf_common+0x3e>
 8006bcc:	18e1      	adds	r1, r4, r3
 8006bce:	1c5a      	adds	r2, r3, #1
 8006bd0:	2030      	movs	r0, #48	@ 0x30
 8006bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bd6:	4422      	add	r2, r4
 8006bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006be0:	3302      	adds	r3, #2
 8006be2:	e7c7      	b.n	8006b74 <_printf_common+0x58>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4622      	mov	r2, r4
 8006be8:	4641      	mov	r1, r8
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c8      	blx	r9
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d0e6      	beq.n	8006bc0 <_printf_common+0xa4>
 8006bf2:	3601      	adds	r6, #1
 8006bf4:	e7d9      	b.n	8006baa <_printf_common+0x8e>
	...

08006bf8 <_printf_i>:
 8006bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	7e0f      	ldrb	r7, [r1, #24]
 8006bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c00:	2f78      	cmp	r7, #120	@ 0x78
 8006c02:	4691      	mov	r9, r2
 8006c04:	4680      	mov	r8, r0
 8006c06:	460c      	mov	r4, r1
 8006c08:	469a      	mov	sl, r3
 8006c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c0e:	d807      	bhi.n	8006c20 <_printf_i+0x28>
 8006c10:	2f62      	cmp	r7, #98	@ 0x62
 8006c12:	d80a      	bhi.n	8006c2a <_printf_i+0x32>
 8006c14:	2f00      	cmp	r7, #0
 8006c16:	f000 80d2 	beq.w	8006dbe <_printf_i+0x1c6>
 8006c1a:	2f58      	cmp	r7, #88	@ 0x58
 8006c1c:	f000 80b9 	beq.w	8006d92 <_printf_i+0x19a>
 8006c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c28:	e03a      	b.n	8006ca0 <_printf_i+0xa8>
 8006c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c2e:	2b15      	cmp	r3, #21
 8006c30:	d8f6      	bhi.n	8006c20 <_printf_i+0x28>
 8006c32:	a101      	add	r1, pc, #4	@ (adr r1, 8006c38 <_printf_i+0x40>)
 8006c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca5 	.word	0x08006ca5
 8006c40:	08006c21 	.word	0x08006c21
 8006c44:	08006c21 	.word	0x08006c21
 8006c48:	08006c21 	.word	0x08006c21
 8006c4c:	08006c21 	.word	0x08006c21
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006c21 	.word	0x08006c21
 8006c58:	08006c21 	.word	0x08006c21
 8006c5c:	08006c21 	.word	0x08006c21
 8006c60:	08006c21 	.word	0x08006c21
 8006c64:	08006da5 	.word	0x08006da5
 8006c68:	08006ccf 	.word	0x08006ccf
 8006c6c:	08006d5f 	.word	0x08006d5f
 8006c70:	08006c21 	.word	0x08006c21
 8006c74:	08006c21 	.word	0x08006c21
 8006c78:	08006dc7 	.word	0x08006dc7
 8006c7c:	08006c21 	.word	0x08006c21
 8006c80:	08006ccf 	.word	0x08006ccf
 8006c84:	08006c21 	.word	0x08006c21
 8006c88:	08006c21 	.word	0x08006c21
 8006c8c:	08006d67 	.word	0x08006d67
 8006c90:	6833      	ldr	r3, [r6, #0]
 8006c92:	1d1a      	adds	r2, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6032      	str	r2, [r6, #0]
 8006c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e09d      	b.n	8006de0 <_printf_i+0x1e8>
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	6031      	str	r1, [r6, #0]
 8006cac:	0606      	lsls	r6, r0, #24
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0xbc>
 8006cb0:	681d      	ldr	r5, [r3, #0]
 8006cb2:	e003      	b.n	8006cbc <_printf_i+0xc4>
 8006cb4:	0645      	lsls	r5, r0, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0xb8>
 8006cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cbc:	2d00      	cmp	r5, #0
 8006cbe:	da03      	bge.n	8006cc8 <_printf_i+0xd0>
 8006cc0:	232d      	movs	r3, #45	@ 0x2d
 8006cc2:	426d      	negs	r5, r5
 8006cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc8:	4859      	ldr	r0, [pc, #356]	@ (8006e30 <_printf_i+0x238>)
 8006cca:	230a      	movs	r3, #10
 8006ccc:	e011      	b.n	8006cf2 <_printf_i+0xfa>
 8006cce:	6821      	ldr	r1, [r4, #0]
 8006cd0:	6833      	ldr	r3, [r6, #0]
 8006cd2:	0608      	lsls	r0, r1, #24
 8006cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cd8:	d402      	bmi.n	8006ce0 <_printf_i+0xe8>
 8006cda:	0649      	lsls	r1, r1, #25
 8006cdc:	bf48      	it	mi
 8006cde:	b2ad      	uxthmi	r5, r5
 8006ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ce2:	4853      	ldr	r0, [pc, #332]	@ (8006e30 <_printf_i+0x238>)
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	bf14      	ite	ne
 8006ce8:	230a      	movne	r3, #10
 8006cea:	2308      	moveq	r3, #8
 8006cec:	2100      	movs	r1, #0
 8006cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cf2:	6866      	ldr	r6, [r4, #4]
 8006cf4:	60a6      	str	r6, [r4, #8]
 8006cf6:	2e00      	cmp	r6, #0
 8006cf8:	bfa2      	ittt	ge
 8006cfa:	6821      	ldrge	r1, [r4, #0]
 8006cfc:	f021 0104 	bicge.w	r1, r1, #4
 8006d00:	6021      	strge	r1, [r4, #0]
 8006d02:	b90d      	cbnz	r5, 8006d08 <_printf_i+0x110>
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	d04b      	beq.n	8006da0 <_printf_i+0x1a8>
 8006d08:	4616      	mov	r6, r2
 8006d0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d0e:	fb03 5711 	mls	r7, r3, r1, r5
 8006d12:	5dc7      	ldrb	r7, [r0, r7]
 8006d14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d18:	462f      	mov	r7, r5
 8006d1a:	42bb      	cmp	r3, r7
 8006d1c:	460d      	mov	r5, r1
 8006d1e:	d9f4      	bls.n	8006d0a <_printf_i+0x112>
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d10b      	bne.n	8006d3c <_printf_i+0x144>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07df      	lsls	r7, r3, #31
 8006d28:	d508      	bpl.n	8006d3c <_printf_i+0x144>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	6861      	ldr	r1, [r4, #4]
 8006d2e:	4299      	cmp	r1, r3
 8006d30:	bfde      	ittt	le
 8006d32:	2330      	movle	r3, #48	@ 0x30
 8006d34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d3c:	1b92      	subs	r2, r2, r6
 8006d3e:	6122      	str	r2, [r4, #16]
 8006d40:	f8cd a000 	str.w	sl, [sp]
 8006d44:	464b      	mov	r3, r9
 8006d46:	aa03      	add	r2, sp, #12
 8006d48:	4621      	mov	r1, r4
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f7ff fee6 	bl	8006b1c <_printf_common>
 8006d50:	3001      	adds	r0, #1
 8006d52:	d14a      	bne.n	8006dea <_printf_i+0x1f2>
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	b004      	add	sp, #16
 8006d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	f043 0320 	orr.w	r3, r3, #32
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	4833      	ldr	r0, [pc, #204]	@ (8006e34 <_printf_i+0x23c>)
 8006d68:	2778      	movs	r7, #120	@ 0x78
 8006d6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	6831      	ldr	r1, [r6, #0]
 8006d72:	061f      	lsls	r7, r3, #24
 8006d74:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d78:	d402      	bmi.n	8006d80 <_printf_i+0x188>
 8006d7a:	065f      	lsls	r7, r3, #25
 8006d7c:	bf48      	it	mi
 8006d7e:	b2ad      	uxthmi	r5, r5
 8006d80:	6031      	str	r1, [r6, #0]
 8006d82:	07d9      	lsls	r1, r3, #31
 8006d84:	bf44      	itt	mi
 8006d86:	f043 0320 	orrmi.w	r3, r3, #32
 8006d8a:	6023      	strmi	r3, [r4, #0]
 8006d8c:	b11d      	cbz	r5, 8006d96 <_printf_i+0x19e>
 8006d8e:	2310      	movs	r3, #16
 8006d90:	e7ac      	b.n	8006cec <_printf_i+0xf4>
 8006d92:	4827      	ldr	r0, [pc, #156]	@ (8006e30 <_printf_i+0x238>)
 8006d94:	e7e9      	b.n	8006d6a <_printf_i+0x172>
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f023 0320 	bic.w	r3, r3, #32
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	e7f6      	b.n	8006d8e <_printf_i+0x196>
 8006da0:	4616      	mov	r6, r2
 8006da2:	e7bd      	b.n	8006d20 <_printf_i+0x128>
 8006da4:	6833      	ldr	r3, [r6, #0]
 8006da6:	6825      	ldr	r5, [r4, #0]
 8006da8:	6961      	ldr	r1, [r4, #20]
 8006daa:	1d18      	adds	r0, r3, #4
 8006dac:	6030      	str	r0, [r6, #0]
 8006dae:	062e      	lsls	r6, r5, #24
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	d501      	bpl.n	8006db8 <_printf_i+0x1c0>
 8006db4:	6019      	str	r1, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <_printf_i+0x1c6>
 8006db8:	0668      	lsls	r0, r5, #25
 8006dba:	d5fb      	bpl.n	8006db4 <_printf_i+0x1bc>
 8006dbc:	8019      	strh	r1, [r3, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6123      	str	r3, [r4, #16]
 8006dc2:	4616      	mov	r6, r2
 8006dc4:	e7bc      	b.n	8006d40 <_printf_i+0x148>
 8006dc6:	6833      	ldr	r3, [r6, #0]
 8006dc8:	1d1a      	adds	r2, r3, #4
 8006dca:	6032      	str	r2, [r6, #0]
 8006dcc:	681e      	ldr	r6, [r3, #0]
 8006dce:	6862      	ldr	r2, [r4, #4]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	f7f9 fa84 	bl	80002e0 <memchr>
 8006dd8:	b108      	cbz	r0, 8006dde <_printf_i+0x1e6>
 8006dda:	1b80      	subs	r0, r0, r6
 8006ddc:	6060      	str	r0, [r4, #4]
 8006dde:	6863      	ldr	r3, [r4, #4]
 8006de0:	6123      	str	r3, [r4, #16]
 8006de2:	2300      	movs	r3, #0
 8006de4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de8:	e7aa      	b.n	8006d40 <_printf_i+0x148>
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	4632      	mov	r2, r6
 8006dee:	4649      	mov	r1, r9
 8006df0:	4640      	mov	r0, r8
 8006df2:	47d0      	blx	sl
 8006df4:	3001      	adds	r0, #1
 8006df6:	d0ad      	beq.n	8006d54 <_printf_i+0x15c>
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	079b      	lsls	r3, r3, #30
 8006dfc:	d413      	bmi.n	8006e26 <_printf_i+0x22e>
 8006dfe:	68e0      	ldr	r0, [r4, #12]
 8006e00:	9b03      	ldr	r3, [sp, #12]
 8006e02:	4298      	cmp	r0, r3
 8006e04:	bfb8      	it	lt
 8006e06:	4618      	movlt	r0, r3
 8006e08:	e7a6      	b.n	8006d58 <_printf_i+0x160>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	4632      	mov	r2, r6
 8006e0e:	4649      	mov	r1, r9
 8006e10:	4640      	mov	r0, r8
 8006e12:	47d0      	blx	sl
 8006e14:	3001      	adds	r0, #1
 8006e16:	d09d      	beq.n	8006d54 <_printf_i+0x15c>
 8006e18:	3501      	adds	r5, #1
 8006e1a:	68e3      	ldr	r3, [r4, #12]
 8006e1c:	9903      	ldr	r1, [sp, #12]
 8006e1e:	1a5b      	subs	r3, r3, r1
 8006e20:	42ab      	cmp	r3, r5
 8006e22:	dcf2      	bgt.n	8006e0a <_printf_i+0x212>
 8006e24:	e7eb      	b.n	8006dfe <_printf_i+0x206>
 8006e26:	2500      	movs	r5, #0
 8006e28:	f104 0619 	add.w	r6, r4, #25
 8006e2c:	e7f5      	b.n	8006e1a <_printf_i+0x222>
 8006e2e:	bf00      	nop
 8006e30:	080072b5 	.word	0x080072b5
 8006e34:	080072c6 	.word	0x080072c6

08006e38 <__sflush_r>:
 8006e38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e40:	0716      	lsls	r6, r2, #28
 8006e42:	4605      	mov	r5, r0
 8006e44:	460c      	mov	r4, r1
 8006e46:	d454      	bmi.n	8006ef2 <__sflush_r+0xba>
 8006e48:	684b      	ldr	r3, [r1, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	dc02      	bgt.n	8006e54 <__sflush_r+0x1c>
 8006e4e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	dd48      	ble.n	8006ee6 <__sflush_r+0xae>
 8006e54:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	d045      	beq.n	8006ee6 <__sflush_r+0xae>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e60:	682f      	ldr	r7, [r5, #0]
 8006e62:	6a21      	ldr	r1, [r4, #32]
 8006e64:	602b      	str	r3, [r5, #0]
 8006e66:	d030      	beq.n	8006eca <__sflush_r+0x92>
 8006e68:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	0759      	lsls	r1, r3, #29
 8006e6e:	d505      	bpl.n	8006e7c <__sflush_r+0x44>
 8006e70:	6863      	ldr	r3, [r4, #4]
 8006e72:	1ad2      	subs	r2, r2, r3
 8006e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e76:	b10b      	cbz	r3, 8006e7c <__sflush_r+0x44>
 8006e78:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e80:	6a21      	ldr	r1, [r4, #32]
 8006e82:	4628      	mov	r0, r5
 8006e84:	47b0      	blx	r6
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	d106      	bne.n	8006e9a <__sflush_r+0x62>
 8006e8c:	6829      	ldr	r1, [r5, #0]
 8006e8e:	291d      	cmp	r1, #29
 8006e90:	d82b      	bhi.n	8006eea <__sflush_r+0xb2>
 8006e92:	4a2a      	ldr	r2, [pc, #168]	@ (8006f3c <__sflush_r+0x104>)
 8006e94:	410a      	asrs	r2, r1
 8006e96:	07d6      	lsls	r6, r2, #31
 8006e98:	d427      	bmi.n	8006eea <__sflush_r+0xb2>
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6062      	str	r2, [r4, #4]
 8006e9e:	04d9      	lsls	r1, r3, #19
 8006ea0:	6922      	ldr	r2, [r4, #16]
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	d504      	bpl.n	8006eb0 <__sflush_r+0x78>
 8006ea6:	1c42      	adds	r2, r0, #1
 8006ea8:	d101      	bne.n	8006eae <__sflush_r+0x76>
 8006eaa:	682b      	ldr	r3, [r5, #0]
 8006eac:	b903      	cbnz	r3, 8006eb0 <__sflush_r+0x78>
 8006eae:	6560      	str	r0, [r4, #84]	@ 0x54
 8006eb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eb2:	602f      	str	r7, [r5, #0]
 8006eb4:	b1b9      	cbz	r1, 8006ee6 <__sflush_r+0xae>
 8006eb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eba:	4299      	cmp	r1, r3
 8006ebc:	d002      	beq.n	8006ec4 <__sflush_r+0x8c>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f7ff fbf2 	bl	80066a8 <_free_r>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ec8:	e00d      	b.n	8006ee6 <__sflush_r+0xae>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4628      	mov	r0, r5
 8006ece:	47b0      	blx	r6
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	1c50      	adds	r0, r2, #1
 8006ed4:	d1c9      	bne.n	8006e6a <__sflush_r+0x32>
 8006ed6:	682b      	ldr	r3, [r5, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0c6      	beq.n	8006e6a <__sflush_r+0x32>
 8006edc:	2b1d      	cmp	r3, #29
 8006ede:	d001      	beq.n	8006ee4 <__sflush_r+0xac>
 8006ee0:	2b16      	cmp	r3, #22
 8006ee2:	d11e      	bne.n	8006f22 <__sflush_r+0xea>
 8006ee4:	602f      	str	r7, [r5, #0]
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e022      	b.n	8006f30 <__sflush_r+0xf8>
 8006eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eee:	b21b      	sxth	r3, r3
 8006ef0:	e01b      	b.n	8006f2a <__sflush_r+0xf2>
 8006ef2:	690f      	ldr	r7, [r1, #16]
 8006ef4:	2f00      	cmp	r7, #0
 8006ef6:	d0f6      	beq.n	8006ee6 <__sflush_r+0xae>
 8006ef8:	0793      	lsls	r3, r2, #30
 8006efa:	680e      	ldr	r6, [r1, #0]
 8006efc:	bf08      	it	eq
 8006efe:	694b      	ldreq	r3, [r1, #20]
 8006f00:	600f      	str	r7, [r1, #0]
 8006f02:	bf18      	it	ne
 8006f04:	2300      	movne	r3, #0
 8006f06:	eba6 0807 	sub.w	r8, r6, r7
 8006f0a:	608b      	str	r3, [r1, #8]
 8006f0c:	f1b8 0f00 	cmp.w	r8, #0
 8006f10:	dde9      	ble.n	8006ee6 <__sflush_r+0xae>
 8006f12:	6a21      	ldr	r1, [r4, #32]
 8006f14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f16:	4643      	mov	r3, r8
 8006f18:	463a      	mov	r2, r7
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b0      	blx	r6
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	dc08      	bgt.n	8006f34 <__sflush_r+0xfc>
 8006f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f34:	4407      	add	r7, r0
 8006f36:	eba8 0800 	sub.w	r8, r8, r0
 8006f3a:	e7e7      	b.n	8006f0c <__sflush_r+0xd4>
 8006f3c:	dfbffffe 	.word	0xdfbffffe

08006f40 <_fflush_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	690b      	ldr	r3, [r1, #16]
 8006f44:	4605      	mov	r5, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	b913      	cbnz	r3, 8006f50 <_fflush_r+0x10>
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	b118      	cbz	r0, 8006f5a <_fflush_r+0x1a>
 8006f52:	6a03      	ldr	r3, [r0, #32]
 8006f54:	b90b      	cbnz	r3, 8006f5a <_fflush_r+0x1a>
 8006f56:	f7ff fa91 	bl	800647c <__sinit>
 8006f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0f3      	beq.n	8006f4a <_fflush_r+0xa>
 8006f62:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f64:	07d0      	lsls	r0, r2, #31
 8006f66:	d404      	bmi.n	8006f72 <_fflush_r+0x32>
 8006f68:	0599      	lsls	r1, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_fflush_r+0x32>
 8006f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f6e:	f7ff fb8a 	bl	8006686 <__retarget_lock_acquire_recursive>
 8006f72:	4628      	mov	r0, r5
 8006f74:	4621      	mov	r1, r4
 8006f76:	f7ff ff5f 	bl	8006e38 <__sflush_r>
 8006f7a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f7c:	07da      	lsls	r2, r3, #31
 8006f7e:	4605      	mov	r5, r0
 8006f80:	d4e4      	bmi.n	8006f4c <_fflush_r+0xc>
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	059b      	lsls	r3, r3, #22
 8006f86:	d4e1      	bmi.n	8006f4c <_fflush_r+0xc>
 8006f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f8a:	f7ff fb7d 	bl	8006688 <__retarget_lock_release_recursive>
 8006f8e:	e7dd      	b.n	8006f4c <_fflush_r+0xc>

08006f90 <__swbuf_r>:
 8006f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f92:	460e      	mov	r6, r1
 8006f94:	4614      	mov	r4, r2
 8006f96:	4605      	mov	r5, r0
 8006f98:	b118      	cbz	r0, 8006fa2 <__swbuf_r+0x12>
 8006f9a:	6a03      	ldr	r3, [r0, #32]
 8006f9c:	b90b      	cbnz	r3, 8006fa2 <__swbuf_r+0x12>
 8006f9e:	f7ff fa6d 	bl	800647c <__sinit>
 8006fa2:	69a3      	ldr	r3, [r4, #24]
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	89a3      	ldrh	r3, [r4, #12]
 8006fa8:	071a      	lsls	r2, r3, #28
 8006faa:	d501      	bpl.n	8006fb0 <__swbuf_r+0x20>
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	b943      	cbnz	r3, 8006fc2 <__swbuf_r+0x32>
 8006fb0:	4621      	mov	r1, r4
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f82a 	bl	800700c <__swsetup_r>
 8006fb8:	b118      	cbz	r0, 8006fc2 <__swbuf_r+0x32>
 8006fba:	f04f 37ff 	mov.w	r7, #4294967295
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	6922      	ldr	r2, [r4, #16]
 8006fc6:	1a98      	subs	r0, r3, r2
 8006fc8:	6963      	ldr	r3, [r4, #20]
 8006fca:	b2f6      	uxtb	r6, r6
 8006fcc:	4283      	cmp	r3, r0
 8006fce:	4637      	mov	r7, r6
 8006fd0:	dc05      	bgt.n	8006fde <__swbuf_r+0x4e>
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f7ff ffb3 	bl	8006f40 <_fflush_r>
 8006fda:	2800      	cmp	r0, #0
 8006fdc:	d1ed      	bne.n	8006fba <__swbuf_r+0x2a>
 8006fde:	68a3      	ldr	r3, [r4, #8]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	60a3      	str	r3, [r4, #8]
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	6022      	str	r2, [r4, #0]
 8006fea:	701e      	strb	r6, [r3, #0]
 8006fec:	6962      	ldr	r2, [r4, #20]
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d004      	beq.n	8006ffe <__swbuf_r+0x6e>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	07db      	lsls	r3, r3, #31
 8006ff8:	d5e1      	bpl.n	8006fbe <__swbuf_r+0x2e>
 8006ffa:	2e0a      	cmp	r6, #10
 8006ffc:	d1df      	bne.n	8006fbe <__swbuf_r+0x2e>
 8006ffe:	4621      	mov	r1, r4
 8007000:	4628      	mov	r0, r5
 8007002:	f7ff ff9d 	bl	8006f40 <_fflush_r>
 8007006:	2800      	cmp	r0, #0
 8007008:	d0d9      	beq.n	8006fbe <__swbuf_r+0x2e>
 800700a:	e7d6      	b.n	8006fba <__swbuf_r+0x2a>

0800700c <__swsetup_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4b29      	ldr	r3, [pc, #164]	@ (80070b4 <__swsetup_r+0xa8>)
 8007010:	4605      	mov	r5, r0
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	460c      	mov	r4, r1
 8007016:	b118      	cbz	r0, 8007020 <__swsetup_r+0x14>
 8007018:	6a03      	ldr	r3, [r0, #32]
 800701a:	b90b      	cbnz	r3, 8007020 <__swsetup_r+0x14>
 800701c:	f7ff fa2e 	bl	800647c <__sinit>
 8007020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007024:	0719      	lsls	r1, r3, #28
 8007026:	d422      	bmi.n	800706e <__swsetup_r+0x62>
 8007028:	06da      	lsls	r2, r3, #27
 800702a:	d407      	bmi.n	800703c <__swsetup_r+0x30>
 800702c:	2209      	movs	r2, #9
 800702e:	602a      	str	r2, [r5, #0]
 8007030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	f04f 30ff 	mov.w	r0, #4294967295
 800703a:	e033      	b.n	80070a4 <__swsetup_r+0x98>
 800703c:	0758      	lsls	r0, r3, #29
 800703e:	d512      	bpl.n	8007066 <__swsetup_r+0x5a>
 8007040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007042:	b141      	cbz	r1, 8007056 <__swsetup_r+0x4a>
 8007044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007048:	4299      	cmp	r1, r3
 800704a:	d002      	beq.n	8007052 <__swsetup_r+0x46>
 800704c:	4628      	mov	r0, r5
 800704e:	f7ff fb2b 	bl	80066a8 <_free_r>
 8007052:	2300      	movs	r3, #0
 8007054:	6363      	str	r3, [r4, #52]	@ 0x34
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800705c:	81a3      	strh	r3, [r4, #12]
 800705e:	2300      	movs	r3, #0
 8007060:	6063      	str	r3, [r4, #4]
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	b94b      	cbnz	r3, 8007086 <__swsetup_r+0x7a>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800707c:	d003      	beq.n	8007086 <__swsetup_r+0x7a>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 f84f 	bl	8007124 <__smakebuf_r>
 8007086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708a:	f013 0201 	ands.w	r2, r3, #1
 800708e:	d00a      	beq.n	80070a6 <__swsetup_r+0x9a>
 8007090:	2200      	movs	r2, #0
 8007092:	60a2      	str	r2, [r4, #8]
 8007094:	6962      	ldr	r2, [r4, #20]
 8007096:	4252      	negs	r2, r2
 8007098:	61a2      	str	r2, [r4, #24]
 800709a:	6922      	ldr	r2, [r4, #16]
 800709c:	b942      	cbnz	r2, 80070b0 <__swsetup_r+0xa4>
 800709e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070a2:	d1c5      	bne.n	8007030 <__swsetup_r+0x24>
 80070a4:	bd38      	pop	{r3, r4, r5, pc}
 80070a6:	0799      	lsls	r1, r3, #30
 80070a8:	bf58      	it	pl
 80070aa:	6962      	ldrpl	r2, [r4, #20]
 80070ac:	60a2      	str	r2, [r4, #8]
 80070ae:	e7f4      	b.n	800709a <__swsetup_r+0x8e>
 80070b0:	2000      	movs	r0, #0
 80070b2:	e7f7      	b.n	80070a4 <__swsetup_r+0x98>
 80070b4:	24000038 	.word	0x24000038

080070b8 <_sbrk_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	@ (80070d4 <_sbrk_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7f9 ff16 	bl	8000ef4 <_sbrk>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_sbrk_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_sbrk_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	24000368 	.word	0x24000368

080070d8 <__swhatbuf_r>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	460c      	mov	r4, r1
 80070dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e0:	2900      	cmp	r1, #0
 80070e2:	b096      	sub	sp, #88	@ 0x58
 80070e4:	4615      	mov	r5, r2
 80070e6:	461e      	mov	r6, r3
 80070e8:	da0d      	bge.n	8007106 <__swhatbuf_r+0x2e>
 80070ea:	89a3      	ldrh	r3, [r4, #12]
 80070ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80070f0:	f04f 0100 	mov.w	r1, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2340      	movne	r3, #64	@ 0x40
 80070f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070fc:	2000      	movs	r0, #0
 80070fe:	6031      	str	r1, [r6, #0]
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	b016      	add	sp, #88	@ 0x58
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	466a      	mov	r2, sp
 8007108:	f000 f848 	bl	800719c <_fstat_r>
 800710c:	2800      	cmp	r0, #0
 800710e:	dbec      	blt.n	80070ea <__swhatbuf_r+0x12>
 8007110:	9901      	ldr	r1, [sp, #4]
 8007112:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007116:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800711a:	4259      	negs	r1, r3
 800711c:	4159      	adcs	r1, r3
 800711e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007122:	e7eb      	b.n	80070fc <__swhatbuf_r+0x24>

08007124 <__smakebuf_r>:
 8007124:	898b      	ldrh	r3, [r1, #12]
 8007126:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007128:	079d      	lsls	r5, r3, #30
 800712a:	4606      	mov	r6, r0
 800712c:	460c      	mov	r4, r1
 800712e:	d507      	bpl.n	8007140 <__smakebuf_r+0x1c>
 8007130:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	6123      	str	r3, [r4, #16]
 8007138:	2301      	movs	r3, #1
 800713a:	6163      	str	r3, [r4, #20]
 800713c:	b003      	add	sp, #12
 800713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007140:	ab01      	add	r3, sp, #4
 8007142:	466a      	mov	r2, sp
 8007144:	f7ff ffc8 	bl	80070d8 <__swhatbuf_r>
 8007148:	9f00      	ldr	r7, [sp, #0]
 800714a:	4605      	mov	r5, r0
 800714c:	4639      	mov	r1, r7
 800714e:	4630      	mov	r0, r6
 8007150:	f7ff fb16 	bl	8006780 <_malloc_r>
 8007154:	b948      	cbnz	r0, 800716a <__smakebuf_r+0x46>
 8007156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715a:	059a      	lsls	r2, r3, #22
 800715c:	d4ee      	bmi.n	800713c <__smakebuf_r+0x18>
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	f043 0302 	orr.w	r3, r3, #2
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	e7e2      	b.n	8007130 <__smakebuf_r+0xc>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	6020      	str	r0, [r4, #0]
 800716e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	9b01      	ldr	r3, [sp, #4]
 8007176:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800717a:	b15b      	cbz	r3, 8007194 <__smakebuf_r+0x70>
 800717c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007180:	4630      	mov	r0, r6
 8007182:	f000 f81d 	bl	80071c0 <_isatty_r>
 8007186:	b128      	cbz	r0, 8007194 <__smakebuf_r+0x70>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	431d      	orrs	r5, r3
 8007198:	81a5      	strh	r5, [r4, #12]
 800719a:	e7cf      	b.n	800713c <__smakebuf_r+0x18>

0800719c <_fstat_r>:
 800719c:	b538      	push	{r3, r4, r5, lr}
 800719e:	4d07      	ldr	r5, [pc, #28]	@ (80071bc <_fstat_r+0x20>)
 80071a0:	2300      	movs	r3, #0
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	602b      	str	r3, [r5, #0]
 80071aa:	f7f9 fe7a 	bl	8000ea2 <_fstat>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	d102      	bne.n	80071b8 <_fstat_r+0x1c>
 80071b2:	682b      	ldr	r3, [r5, #0]
 80071b4:	b103      	cbz	r3, 80071b8 <_fstat_r+0x1c>
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	bd38      	pop	{r3, r4, r5, pc}
 80071ba:	bf00      	nop
 80071bc:	24000368 	.word	0x24000368

080071c0 <_isatty_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d06      	ldr	r5, [pc, #24]	@ (80071dc <_isatty_r+0x1c>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	f7f9 fe79 	bl	8000ec2 <_isatty>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_isatty_r+0x1a>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_isatty_r+0x1a>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	24000368 	.word	0x24000368

080071e0 <_init>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	bf00      	nop
 80071e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071e6:	bc08      	pop	{r3}
 80071e8:	469e      	mov	lr, r3
 80071ea:	4770      	bx	lr

080071ec <_fini>:
 80071ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ee:	bf00      	nop
 80071f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f2:	bc08      	pop	{r3}
 80071f4:	469e      	mov	lr, r3
 80071f6:	4770      	bx	lr
